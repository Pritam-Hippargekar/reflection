https://www.robinwieruch.de/react-router-lazy-loading/
https://www.copycat.dev/blog/react-lazy/
https://www.aleksandrhovhannisyan.com/blog/react-lazy-dynamic-imports/


why virtual dom is faster?
ans => because of immutibility concepts (it compare object references)  like String in java


// mutate items and set it back
this.state = {
            counter: 0,
        }
this.state.counter = this.state.counter + 1 ;   what is problem here. it will notice that its props haven’t changed and it will not re-render.
ans == the component will not rerender since the state is compared shallowly. Additionally, the update may be lost if there are other state changes queued asynchronously using setState.
The Solution
The solution for the first example is to always use the setState function to ensure state changes are properly queued.



increment() {
        this.setState({
            counter: this.state.counter + this.props.increment
        })
    }
potential race condition between other state/prop changes and this particular state update. What happens if the props and/or state change before this state update happens?
The Solution
increment() {
        this.setState((prevState, props) => ({
            counter: prevState.counter + props.increment
        })
    }




React state not updating immediately?
--------------
The reason why the state doesn’t update immediately is because for each render, the state is immutable.
function App(){
    const [count, setCount] = useState(1);

    function onClick(){
        setCount(count + 1)
        console.log(count);  
    // First time the button is clicked this will log 1, not 2
    // This console logged count will always "lag behind"
    }

    console.log(count) 
    //This will log 1 on first render 
    //before clicking the button.
    //After the first button click, the state 
    //will be updated which triggers a second 
    //render and then this will log 2

    return(
        <button onClick={onClick}>increment count</button>
    )	
}
setCount tells React to re-render the component later with the updated value.
but
What if you need to use the future state you just updated ?
solutation
//Do this:
function onChange(){
  const newCount = count + 1;
  setCount(newCount);
  getData(newCount); 
  //now you can be sure you call getData
  //with the state you just set
}



event.target ==  work only for accessing event not for DOM.



return myFunction() // returns a promise
  .catch(e => {
    return errorFunction()  // returns a promise
  })
  .then(v => {
    return anotherFunction(); // returns a promise
  })
  .then(x => {
    return anotherFunction() // returns a promise
  });











Why an immediately resolved promise is processed faster than an immediate timer?
-------------------------------------------------------------------------------
MacroTasks are called Tasks, and MicroTasks are called Jobs.
Because of the event loop priorities dequeuing jobs 
                from the job queue (which stores the fulfilled promises' callbacks) 
over the tasks from the task queue (which stores timed out setTimeout() callbacks).




what is Error Boundaries and which cycle is used for in reactjs?
for functional components == react-error-boundary
life cycle method componentDidCatch(error, info) == for class components
you can use the static function getDerivedStateFromError(error) to update the state and use the render() method to display a fallback UI if an error occurs.


drawbacks of Error Boundaries
-----------------------------
- it catches only the errors which occur during the life-cycle of a component
- error boundaries do not handle errors in:
    event handlers,
    asynchronous code (e.g., setTimeout or requestAnimationFrame callbacks),
    server-side rendering; or
    the error boundary itself (rather than its children).
- the componentDidCatch(error, info) life cycle method is called only if an error occurs while rendering, 
  in lifecycle methods, or constructors of any child component of the component.
- As a result, error boundaries, cannot handle errors in event handlers, asynchronous callbacks, or server-side rendering.
because such errors happen outside of the React rendering lifecycle
- Errors happening inside of handleSubmit() function won’t be caught by React rendering lifecycle.

react-error-boundary : is the most effective solution to overcome the limitations of the basic error boundaries.
- It enables you to display a fallback component
- log errors just like in the basic error boundaries
- reset the application’s state, so the error does not occur again
- you can now handle errors in event handlers and asynchronous code using the useErrorHandler(error) custom hook
- will propagate that to the nearest error boundary
- You can use a third-party client-side logging service to log errors persistently.
- properly catch errors and provide a retry mechanism
- resetErrorBoundary is a callback to reset the error state and re-render the children's components
- react-error-boundary has us covered by providing a handleError() hook that helps with catching event-related and asynchronous errors
- we use the handleError function provided by react-error-boundary’s useErrorHandler() to rethrow the error in the React lifecycle so that the nearest ErrorBoundary can catch it.



What Happens When You Cancel an HTTP Request?
Before the request is sent: If the cancellation occurs before the request is sent, the HTTP request is immediately discarded, and no further action is taken.
During the request transmission: If the cancellation occurs during the transmission of the request, the HTTP request is aborted, and no further data is sent to the server. The server may still receive and process the data it received before the cancellation, but the client will not wait for any response from the server.
After the request has been sent: If the cancellation occurs after the request is sent but before a response is received, the client will stop waiting for a response to that request. The server will process the HTTP request and send a response, but the client will not expect a response from it. So, the client is allowed to move on to new requests.

Cancelling HTTP Requests in Axios
1) With CancelToken: Deprecated in Axios since v0.22.0. 
            useEffect(() => {
            const cancelToken = axios.CancelToken;
            const source = cancelToken.source();
            setAxiosRes("axios request created");
            getReq(source).then((res) => { setAxiosRes(res);});
            
            return () => {
            source.cancel("axios request cancelled");
            };
            }, [axiosClick]);

            // perform the HTTP GET request you want to cancel
            axios.get('https://your-server.com/products', {
                // specify the cancelToken to use
                // for cancelling the request
                cancelToken: cancelTokenSource.token
            }).catch(function (e) {
                // if the reason behind the failure 
                // is a cancellation
                if (axios.isCancel(e)) {
                    console.error(e.message);
                } else {
                    // handle HTTP error...
                }
            })

2) With AbortController: Introduced in Axios v0.22.0.

import axios from "axios"
// initialize an AbortController instance
const abortController = new AbortController()

// perform the HTTP GET request you want to cancel
axios.get('https://your-server.com/products', {
  // specify the AbortController signal to use for cancelling the request
  signal: abortController.signal
}).catch(function (e) {
  // if the reason behind the failure is a cancellation
  if (axios.isCancel(e)) {
    console.error('Operation canceled');
  } else {
    // handle HTTP error...
  }
})

// cancel all the HTTP requests with the same
// signal read from abortController.signal
abortController.abort()




Response Timeout/ Cancel Requests
---------------------------------------
Let’s see how these HTTP clients handle response timeout for HTTP requests. With Axios, wecan add a timeout property in the configuration object and specify the time in milliseconds before the request terminates.
In the following snippet, we aim to terminate the request if it takes longer than four seconds and then log an error in the console.

const url = "https://jsonplaceholder.typicode.com/todos";

axios.get(url, {
  timeout: 4000, // default is `0` (no timeout)
})
  .then((response) => console.log(response.data))
  .catch((err) => {
    console.log(err.message);
  });
To cancel requests with Fetch, we can use the AbortController interface. See the usage below:

const url = "https://jsonplaceholder.typicode.com/todos";

const controller = new AbortController();
const signal = controller.signal;
setTimeout(() => controller.abort(), 4000);

fetch(url, {
  signal: signal
})
  .then((response) => response.json())
  .then(console.log)
  .catch((err) => {
    if (err.name === "AbortError") {
        console.error('Operation canceled');
    }
    console.error(err.message);
  });

useEffect(() => {
 const controller = new AbortController();
 const signal = controller.signal;
 hitApi(signal).then((res) => {
  setFetchRes(res);
 });
 //cleanup function
 return () => {controller.abort();};
}, [fetchClick]);


public static <T> Stream<T> getStream(T[] arr) {
    return Arrays.stream(arr);
    return Stream.of(arr);
    return Arrays.asList(arr).stream();
}

public <T> List<T> magicalListGetter(final  Class<T> klazz) {
    List<T> list = new ArrayList<>();
    list.add(klazz.cast(actuallyT));
    try {
        list.add(klazz.getConstructor().newInstance()); // If default constructor
    } ...
    return list;
}

Type of parameters passed to a method as in and out parameter.
 ---------------------------------------------------------------
Upper Bound WildCards: ? extends Type: an unknown type which is a specific Type or sub-type Type
Lower Bound Wildcards: ? super Type: an unknown type which is a specific Type or super-type of that Type.

Guidelines for Wildcards(Get-Put Principle)
------------------------------------------------
Upper bound wildcard − If a variable is of in category, use extends keyword with wildcard.
Lower bound wildcard − If a variable is of out category, use super keyword with wildcard.
Unbounded wildcard − If a variable can be accessed using Object class method then use an unbound wildcard.
No wildcard − If code is accessing variable in both in and out category then do not use wildcards.



https://levelup.gitconnected.com/generics-and-wildcards-in-java-1e678f7792
...........................................................................
public class Pet { String name(); }
public class Dog extends Pet { String name(){...}  }
public class Bulldog extends Dog { String name(){...} }

public class Cat extends Pet {  String name(){...} }
public class Persian extends Cat {  String name(){...} }

Even though Dog is a subtype of Pet, List<Dog> is not a subtype of List<Pet>.
means === a subtype has to offer all the services of the super-type.
List<? extends Pet> is the type of a list in which the elements have an unspecified type that is a subtype of Pet (or Pet itself).
means  === List<Dog> is a subtype of List<? extends Pet> is now valid.

void addCat(List<? super Cat> collection) {
  collection.add(new Cat(...));
}
Method addCat can be called on a List<Cat> or on a List<Pet>, or even on a List<Object>.

wildcards are generally used for non-manipulation operations only

public class Box<T> {

    private T value;

    public void setValue(T value) {
        this.value = value;
    }

    public T getValue() {
        return value;
    }
}



Variables aren’t values; variables are references to values.
React Prefers Immutability
----------------------------
In React’s case, it’s important to never mutate state or props. Whether a component is a function or a class doesn’t matter for this rule. If you’re about to write code
like this.state.something = ... or this.props.something = ..., take a step back and try to come up with a better way.
As for props, they’re a one-way thing. Props come IN to a component. They’re not a two-way street,


mutable =  Function, Object, Array, Map, Set, Date and Almost everything made with 'new' keyword.
Immutable = Undefine, null, Symbol, String, Boolean and BigInt


handleButtonClicked = evt => {
    this.setState({name: evt.currentTarget.value})
    this.props.callback(this.state.name) // Will send the old value for name
}
The Solution:
------------------
The setState function takes an optional callback parameter that can be used to make updates after the state is changed.
handleButtonClicked = evt => {
    this.setState({name: evt.currentTarget.value}, () => {
        this.props.callback(this.state.name)
    })
}




https://yespp.atlassian.net/browse/YPP-16923,https://yespp.atlassian.net/browse/YPP-16921,https://yespp.atlassian.net/browse/YPP-16929,
https://yespp.atlassian.net/browse/YPP-16925,https://yespp.atlassian.net/browse/YPP-13468,https://yespp.atlassian.net/browse/YPP-16877

https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-advanced-selectors
https://learn.shayhowe.com/advanced-html-css/complex-selectors/
Andy Bell and Heydon Pickering
*,
*::before,
*::after {
  box-sizing: border-box;
}

* + * {
  margin-top: 1.5rem;
}






Important=====https://github.com/Vicky-cmd/Authentication-Service
Currently Working as a Developer in Tata Consultancy Services on Spring Boot Applications & Microservices. 
Interested to learn new things about cloud and DevOps
https://github.com/Nasruddin/spring-boot-based-microservices
2. Enable Spring Cloud API Gateway Routes == management.endpoint.gateway.enabled=true
3. Expose API Gateway Routes == management.endpoints.web.exposure.include=health,gateway

why function based component we should use?
------------------------------------
1) class => function => render
2) function => render

The methods defined in the two interfaces of GatewayFilter and GlobalFilter are both Monofilter(ServerWebExchange exchange, GatewayFilterChain chain), the only difference is that GatewayFilter inherits ShortcutConfigurable, and GlobalFilter does not have any inheritance.

Custom GlobalFilter
-------------------
The GlobalFilter interface has the same signature as GatewayFilter. These are special filters that are conditionally applied to all routes.
@Component
public class AuthSignatureFilter implements GlobalFilter, Ordered {

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        String token = exchange.getRequest().getQueryParams().getFirst("authToken");
        if (token == null || token.isEmpty()) {
            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
            return exchange.getResponse().setComplete();
        }
        return chain.filter(exchange);
    }

    @Override
    public int getOrder() {
        return -200;
    }
}


Custom GatewayFilter
----------------------------------------------
public class CustomFilter implements GatewayFilter, Ordered {

    private static final Log log = LogFactory.getLog(GatewayFilter.class);
    private static final String COUNT_Start_TIME = "countStartTime";

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        exchange.getAttributes().put(COUNT_Start_TIME, System.currentTimeMillis());
        return chain.filter(exchange).then(
                Mono.fromRunnable(() -> {
                    Long startTime = exchange.getAttribute(COUNT_Start_TIME);
                    Long endTime=(System.currentTimeMillis() - startTime);
                    if (startTime != null) {
                        log.info(exchange.getRequest().getURI().getRawPath() + ": " + endTime + "ms");
                    }
                })
        );
    }

    @Override
    public int getOrder() {
        return Ordered.LOWEST_PRECEDENCE;
    }
}

@Bean
public RouteLocator customerRouteLocator(RouteLocatorBuilder builder) {
    return builder.routes()
            .route(r -> r.path("/test/prefix/**")
                    .filters(f -> f.stripPrefix(2)
                            .filter(new CustomFilter())
                            .addResponseHeader("X-Response-test", "test"))
                    .uri("lb://SC-CONSUMER")
                    .order(0)
                    .id("test_consumer_service")
            )
            .build();
}


spring:
  application:
    name: apigateway-service
  cloud:
    gateway:
      routes:
        - id: first-service
          uri: http://localhost:8081
          predicates:
            - Path=/first-service/**
          filters:
            - AddRequestHeader=first-request, first-request-header2 # 앞에가 key, 뒤에가 value
            - AddResponseHeader=first-response, first-response-header2
        - id: second-service
          uri: http://localhost:8082
          predicates:
            - Path=/second-service/**
          filters:
            - AddRequestHeader=second-request, second-request-header2
            - AddResponseHeader=second-response, second-response-header2
@Configuration
public class FilterConfig {

    @Bean
    public RouteLocator gatewayRoutes(RouteLocatorBuilder routeLocatorBuilder) {
        return routeLocatorBuilder
                .routes()
                    .route(r -> r.path("/first-service/**")// 1.path를 확인하고
                            .filters(f -> f// 2.필터를 적용하여
                                    .addRequestHeader("first-request", "first-service-requestHeader")
                                    .addResponseHeader("first-response", "first-service-responseHeader"))
                            .uri("http://localhost:8081"))//uri로 이동시켜준다.

                    .route(r -> r.path("/second-service/**")
                            .filters(f -> f
                                    .addRequestHeader("second-request", "second-service-requestHeader")
                                    .addResponseHeader("second-response", "second-service-responseHeader"))
                            .uri("http://localhost:8082"))
                    .build();
    }
}



public class LoggingFilter extends AbstractGatewayFilterFactory<LoggingFilter.Config> {
    public LoggingFilter() {
        super(Config.class);
    }

    @Override
    public GatewayFilter apply(Config config) {
        GatewayFilter filter = new OrderedGatewayFilter((exchange, chain) -> {
            ServerHttpRequest request = exchange.getRequest();
            ServerHttpResponse response = exchange.getResponse();

            log.info("Logging Filter baseMessage:  {}",config.getBaseMessage());

            if (config.isPreLogger()) {
                log.info("Logging Pre Filter: request id ->  {}", request.getId());
            }

            // Custom PostFilter
            return chain.filter(exchange).then(Mono.fromRunnable(() -> {
                if (config.isPostLogger()) {
                    log.info("Logging Post Filter: response -> {}",response.getStatusCode());
                }
            }));

        }, Ordered.LOWEST_PRECEDENCE);

        return filter;
    }

    

    @Data
    public static class Config {
        // put the configuration Properties
        private String baseMessage;
        private boolean preLogger;
        private boolean postLogger;
    }
}













spring:
  application:
    name: apigateway-service
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gatway Global Filter
            preLogger: true
            postLogger: true
      routes:
        - id: first-service
          uri: http://localhost:8081/
          predicates:
            - Path=/first-service/**
@Component
@Slf4j
public class GlobalFilter extends AbstractGatewayFilterFactory<GlobalFilter.Config>{

    public GlobalFilter()    {
        super(Config.class);
    }

    @Override
    public GatewayFilter apply(Config config)    {
        //Custom Pre Filter
        return ((exchange, chain) -> {
            ServerHttpRequest request = exchange.getRequest();
            ServerHttpResponse response = exchange.getResponse();

            log.info("Global Filter baseMessage: {}",config.getBaseMessage());

            if (config.isPreLogger()){
                log.info("GLobal Filter Start: request id -> {}" , request.getId());
            }

            // Custom Post Filter
            return chain.filter(exchange).then(Mono.fromRunnable(() -> {
                if (config.isPostLogger()){
                    log.info("Global Filter End : response code -> {}",response.getStatusCode());
                }
            }));
        });
    }

    @Data
    public static class Config    {
        private String baseMessage;
        private boolean preLogger;
        private boolean postLogger;
        // Put the configuration properties
    }

}










 the laziness of the Java Streams and how that helps optimising the performance.
 The Java 8 Streams API is fully based on the ‘process only on demand‘ strategy and hence supports laziness.
 Java 8 Streams do not process the collection operations until user actually starts using it.
 
 //Created a Stream of a Students List 
//attached a map operation on it 
Stream<String> streamOfNames = students.stream() 
    .map(student - > { 
        System.out.println("In Map - " + student.getName()); 
        return student.getName(); 
    }); 

//Just to add some delay 
for (int i = 1; i <= 5; i++) { 
    Thread.sleep(1000); 
    System.out.println(i + " sec"); 
} 

//Called a terminal operation on the stream 
streamOfNames
    .collect(Collectors.toList());

Output:

1 sec 
2 sec 
3 sec 
4 sec 
5 sec 
In Map - Tom 
In Map - Chris 
In Map - Dave























