@Service
public class MailService {
    @Autowired
    private JavaMailSender mailSender;
    @Autowired
    private Configuration configuration;
    public String sendMail(EmailRequestDto request, Map<String, String> model) {
        String response;
        MimeMessage message = mailSender.createMimeMessage();
        try {
            MimeMessageHelper helper = new MimeMessageHelper(message, MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED,
                    StandardCharsets.UTF_8.name());
            ClassPathResource pdf = new ClassPathResource("static/attachment.pdf");
            ClassPathResource image = new ClassPathResource("static/asbnotebook.png");
            Template template = configuration.getTemplate("email.ftl");
            String html = FreeMarkerTemplateUtils.processTemplateIntoString(template, model);
            helper.setTo(request.getTo());
            helper.setFrom(request.getFrom());
            helper.setSubject(request.getSubject());
            helper.setText(html, true);
            helper.addInline("asbnotebook", image);
            helper.addAttachment("attachment.pdf", pdf);
            helper.addAttachment("logo.png", new ClassPathResource("memorynotfound-logo.png"));
            mailSender.send(message);
            response = "Email has been sent to :" + request.getTo();
        } catch (MessagingException | IOException | TemplateException e) {
            response = "Email send failure to :" + request.getTo();
        }
        return response;
    }
}

https://www.onlyxcodes.com/2021/02/sending-email-spring-boot-rest-api.html
https://techblogstation.com/spring-boot/spring-boot-send-email-with-attachment/
---------------setup for Gmail SMTP server-----------------------------------------------------------------
debug=true
spring.mail.default-encoding=UTF-8
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.protocol=smtp
spring.mail.username=your gmail id        ##Login password for the SMTP server
spring.mail.password=your gmail password  ##Login user for the SMTP server
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true   

spring.mail.properties.mail.debug=true
spring.mail.properties.mail.transport.protocol=smtp
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000


# TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true
 
# SSL, post 465
#spring.mail.properties.mail.smtp.socketFactory.port = 465
#spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory



As TLS connections are required by some SMTP servers, that’s why we have enabled these properties in the application.properties –
---------------------------------------------------------
spring.mail.properties.mail.smtp.starttls.enable and
spring.mail.properties.mail.smtp.auth.