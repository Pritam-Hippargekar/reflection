
YPP-14783 API DCA_ACTIVATE_UPI_PAYOUT
=====================================

public PartnerApisResponse activateUpiPayoutMode(PartnerApisRequest request, Partner partner) {
		log.info("Request to activateUpiPayoutMode {} for partner {}", request, partner.getId());
		try {
			if (StringUtils.isAnyBlank(request.getPartnerReferenceNo(), request.getP1(), request.getP2(),
					request.getP3(), request.getP4(), request.getP5(), request.getP6(), request.getP7(), request.getP8(), request.getP9())) {
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "P006")));
			}
			if (!request.getP1().matches("^[A-Za-z0-9]{3}$")) {
				log.info("Invalid Partner client {}", request.getP1());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA005")));
            } 
			if (!request.getP2().matches("[0-9]{1,5}$")) {
				log.info("Invalid MCC{}", request.getP2());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA090")));
			}
			if (!businessTypeMap.containsKey(request.getP3())) {
				log.info("Invalid Business Type {}", request.getP2());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA091")));
			}
			if (!(request.getP4().matches("[0-9]*$") && Integer.parseInt(request.getP4()) > 0)) {
				log.info("Invalid Per Day Transaction Count {}", request.getP4());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA092")));
			}
			//Check for per day throughput limit greater than 0
	    	BigDecimal perDayThroughputLimit;
	    	try {
	    		perDayThroughputLimit = new BigDecimal(request.getP5());
	    		if(!RandomUtil.validateAmount(perDayThroughputLimit)) {
	    			log.info("Invalid Per day throughput limit {}" , request.getP5());
	    			return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA093")));
	    		}
	    	} catch(Exception e) {
	    		log.info("Invalid Per day throughput limit {}" , request.getP5());
	    		return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA093")));
	    	}    	
	    	//Check for maximumTransactionAmount greater than 0
	    	BigDecimal maximumTransactionAmount;
	    	try {
	    		maximumTransactionAmount = new BigDecimal(request.getP6());
	    		if(!(RandomUtil.validateAmount(maximumTransactionAmount) && maximumTransactionAmount.compareTo(new BigDecimal("100000")) <= 0
	    				&& maximumTransactionAmount.compareTo(perDayThroughputLimit) < 0)) {
	    			log.info("Invalid Maximum Transaction Amountt {}" , request.getP6());
	    			return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA094")));
	    		}
	    	} catch(Exception e) {
	    		log.info("Invalid Maximum Transaction Amountt {}" , request.getP6());
	    		return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA094")));
	    	}
			if (!request.getP9().matches("[0-9]{6}$")) {
				log.info("Invalid pin code {}", request.getP9());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA097")));
			}
			if (!(request.getP8().matches("^[A-Za-z]*$") && request.getP8().length()<= 100 )) {
				log.info("Invalid city {}", request.getP8());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA095")));
			}
			Optional<PartnerDASetup> partnerDASetupInfo = partnerDASetupRepository.findByPartnerId(partner.getId());
		    if (!partnerDASetupInfo.isPresent()) {
				log.info("Invalid client config missing {}", partner.getId());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA099")));
			}
			Optional<PartnerClient> partnerClient = partnerClientRepository.findByClientIdentifierAndPartnerId(request.getP1(), partner.getId());
			if (!partnerClient.isPresent()) {
				log.info("Invalid Partner client {}", request.getP1());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA005")));
			}
			if (partnerClient.get().getStatus().equals(Status.INACTIVE)) {
				log.info("Invalid Partner client {} not active", request.getP1());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA029")));
			}
			if(partnerClient.get().getIsSuspended()) {
				log.info("Client is suspended {}", partnerClient.get().getIsSuspended());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA102")));
			}
			if(!(partnerClient.get().getPurpose().equals(PartnerClientPurposeEnum.DC_AGGREGATOR))) {
				log.info("Invalid Client is not eligible for this purpose  {}", partner.getId());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA057")));
			}
			Optional<StateMaster> stateMasterInfo = stateMasterRepository.findOneByUpiStateCode(request.getP7());
			if (!stateMasterInfo.isPresent()) {
				log.info("Invalid State {}", request.getP7());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA096")));
			}
			Optional<UpiSubMerchantDetails> upiSubMerchantDetailsInfo = upiSubMerchantDetailsRepository.findByOwnerIdAndOwnerType(partnerClient.get().getId(), UpiSubMerchantDetailsOwnerTypeEnum.PARTNER_CLIENT);
			if (upiSubMerchantDetailsInfo.isPresent()) {
				if (UpiSubMerchantDetailsUpiOnboardingStatusEnum.SUCCESS.equals(upiSubMerchantDetailsInfo.get().getUpiOnboardingStatus())) {
					log.info("Client already On-Boarded  {}", partnerClient.get().getId());
					return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA076")));
				} else if (UpiSubMerchantDetailsUpiOnboardingStatusEnum.PENDING.equals(upiSubMerchantDetailsInfo.get().getUpiOnboardingStatus())) {
					log.info("Client Sub-Merchant On-Boarding already in process:  {}", partnerClient.get().getId());
					return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA111")));
				} else if (UpiSubMerchantDetailsUpiOnboardingStatusEnum.FAIL.equals(upiSubMerchantDetailsInfo.get().getUpiOnboardingStatus())) {
					log.info("Client Sub-Merchant On-Boarding Failed. Please Contact Customer Care:  {}", partnerClient.get().getId());
					return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA079")));
				}
			}
			// vpa
			String merVpa = ("yespay" + partner.getPartnerCode() + "c" + partnerClient.get().getClientIdentifier()).toLowerCase();
			String vpa = "yespay" + (partner.getPartnerCode() + "c" + partnerClient.get().getClientIdentifier()) + "@";
			String dynamicVpa = (Arrays.asList(env.getActiveProfiles()).contains("prod")
					? vpa.concat("yesbank").toLowerCase()
					: vpa.concat("yesb").toLowerCase());
			UpiSubMerchantDetails upiSubMerchantDetails = createUpiSubMerchantDetails(partner, partnerClient, request, perDayThroughputLimit, maximumTransactionAmount, dynamicVpa); // Creating UpiSubMerchantDetails
			try {
				// mind gate onboard api call
				MgApiRequestDto mgApiRequestDto = new MgApiRequestDto(Constants.DCA, getUpisubmerchantOnboardRequest(upiSubMerchantDetails, partnerClient.get(), merVpa, request)); // TODO
				String apiResponse = null;
				if (Arrays.asList(env.getActiveProfiles()).contains("prod")) {
					apiResponse = commonApiService.commonMGApi(new JSONObject(mgApiRequestDto).toString(), merchantOnboardUrl);
				} else {
					apiResponse = dummyApiResponseRepository.findByKeyAndApiNameAndValue("Upi", ApiNameEnum.UPI_SUBMERCHANT_ONBOARD, partnerClient.get().getClientIdentifier()).orElse(new DummyApiResponse()).getApiResponse();
					if (StringUtils.isBlank(apiResponse))
						apiResponse = commonApiService.commonMGApi(new JSONObject(mgApiRequestDto).toString(), merchantOnboardUrl);
				}				 
				log.info("UpisubmerchantOnboard api response: {}", apiResponse);
				MgSubMerchantApiResponseDto responseDto = new ObjectMapper().readValue(apiResponse, MgSubMerchantApiResponseDto.class);
				if (null != responseDto && null != responseDto.getStatus() && "SUCCESS".equalsIgnoreCase(responseDto.getStatus())) {
					upiSubMerchantDetails.subMerchantId(responseDto.getSubMerchantId()).upiOnboardingStatus(UpiSubMerchantDetailsUpiOnboardingStatusEnum.SUCCESS);
					upiSubMerchantDetailsRepository.save(upiSubMerchantDetails);
				} else if (null != responseDto && null != responseDto.getStatus() && Arrays.asList("FAILED","FAILURE").contains(responseDto.getStatus())) {
					upiSubMerchantDetails.upiOnBoardingMessage(responseDto.getStatusDesc()).upiOnboardingStatus(UpiSubMerchantDetailsUpiOnboardingStatusEnum.FAIL);
					upiSubMerchantDetailsRepository.save(upiSubMerchantDetails);
					return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA098")));
				}
			} catch (Exception e) {
				log.error("Exception in activateUpiPayoutMode: {}", e.getMessage(), e);
				upiSubMerchantDetails.upiOnBoardingMessage("Timeout");
				upiSubMerchantDetailsRepository.save(upiSubMerchantDetails);
			}
			PartnerApisResponse response = new PartnerApisResponse();
            if(UpiSubMerchantDetailsUpiOnboardingStatusEnum.SUCCESS.equals(upiSubMerchantDetails.getUpiOnboardingStatus())) {
            	response.setResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "00")));
            } else {
            	response.setResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA120")));
            }
			response.setPartnerReferenceNumber(request.getPartnerReferenceNo());
			response.setMerchantVPA(upiSubMerchantDetails.getVirtualAddress());
			response.setStatus("SUCCESS");
			return response;
		} catch (Exception e) {
			log.error("Exception in activateUpiPayoutMode: {}", e.getMessage(), e);
			return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VA_UPI_ENROLLMENT, "YPP", "", "DCA098")));
		}
	}

	private UpiSubMerchantDetails createUpiSubMerchantDetails(Partner partner, Optional<PartnerClient> partnerClient, PartnerApisRequest request, BigDecimal perDayThroughputLimit, BigDecimal maximumTransactionAmount, String dynamicVpa) {
		UpiSubMerchantDetails upiSubMerchantDetails = new UpiSubMerchantDetails();
		upiSubMerchantDetails.setUpiSystem("MINDGATE");
		upiSubMerchantDetails.setOwnerType(UpiSubMerchantDetailsOwnerTypeEnum.PARTNER_CLIENT);
	    upiSubMerchantDetails.setOwnerId(partnerClient.get().getId());
		upiSubMerchantDetails.setBusinessName(partnerClient.get().getClientName());
		upiSubMerchantDetails.setVirtualAddress(dynamicVpa);
		upiSubMerchantDetails.setMcc(request.getP2());
		upiSubMerchantDetails.setIntegrationType("WEBAPI");
		upiSubMerchantDetails.setPan(partnerClient.get().getPan());
		upiSubMerchantDetails.setBusinessType(businessTypeMap.get(request.getP3()));
		upiSubMerchantDetails.setPerDayTransactionCount(Integer.parseInt(request.getP4()));
		upiSubMerchantDetails.setPerDayThroughput(perDayThroughputLimit);
		upiSubMerchantDetails.setMaximumTransactionAmount(maximumTransactionAmount);
		upiSubMerchantDetails.setMobileNo(partnerClient.get().getMobileNumber());
		upiSubMerchantDetails.setSmsNotification("N");
		upiSubMerchantDetails.setEmailNotification("N");
		upiSubMerchantDetails.setStateCode(request.getP7());
		upiSubMerchantDetails.setPinCode(request.getP9());
		upiSubMerchantDetails.setCity(request.getP8());
		upiSubMerchantDetails.setStatus(UpiSubMerchantDetailsStatusEnum.ACTIVE);
		upiSubMerchantDetails.setUpiOnboardingStatus(UpiSubMerchantDetailsUpiOnboardingStatusEnum.PENDING);
		upiSubMerchantDetails.setMasterMerchantId(dcaPgMerchantId);
		upiSubMerchantDetails.setPartner(partner);
		
		upiSubMerchantDetails.setRequestId(partnerClient.get().getClientIdentifier() + Instant.now().getEpochSecond());
		upiSubMerchantDetails.setAdd(request.getP8());
		upiSubMerchantDetails.setAddInfo1(request.getP9());
		upiSubMerchantDetails.setAddInfo2("0.0");
		upiSubMerchantDetails.setAddInfo3("0.0");
		upiSubMerchantDetails.setAddInfo4("N");
		upiSubMerchantDetails.setAddInfo5("N");
		upiSubMerchantDetails.setAddInfo6("LARGE");
		upiSubMerchantDetails.setAddInfo7("KU");
		upiSubMerchantDetails.setAddInfo8("AB");
		upiSubMerchantDetails.setAddInfo9("addinfo9");
		upiSubMerchantDetails.setAddInfo10("addinfo10");
		upiSubMerchantDetails.setCntEmail(partnerClient.get().getEmail());
		upiSubMerchantDetails.setStrEmailId(partnerClient.get().getEmail());
		upiSubMerchantDetails.setStrCntMobile(partnerClient.get().getMobileNumber());
		upiSubMerchantDetails.setMerchantGenre("ONLINE");
		upiSubMerchantDetails.setExtMID("12345");
		upiSubMerchantDetails.setExtTID("12345");
		upiSubMerchantDetails.setGst(partnerClient.get().getGstn());
		return upiSubMerchantDetailsRepository.save(upiSubMerchantDetails);	
	}

	private String getUpisubmerchantOnboardRequest(UpiSubMerchantDetails upiSubMerchantDetails, PartnerClient partnerClient, String merVpa, PartnerApisRequest request) {
		SubMerchantRequestDto requestDto = new SubMerchantRequestDto();
		requestDto.setAction("C");
		requestDto.setMebussname(partnerClient.getClientName());
		requestDto.setMerVirtualAdd(merVpa);
		requestDto.setAwlmcc(upiSubMerchantDetails.getMcc());
		requestDto.setIntegrationType(upiSubMerchantDetails.getIntegrationType());
		requestDto.setPanNo(upiSubMerchantDetails.getPan());
		requestDto.setMeBussntype(request.getP3());
		requestDto.setPdayTxnCount(upiSubMerchantDetails.getPerDayTransactionCount().toString());
		requestDto.setPdayTxnLmt(upiSubMerchantDetails.getPerDayThroughput().setScale(2).toString());
		requestDto.setPdayTxnAmt(upiSubMerchantDetails.getMaximumTransactionAmount().setScale(2).toString());
		requestDto.setAddinfo1(upiSubMerchantDetails.getAddInfo1());
		requestDto.setAddinfo2(upiSubMerchantDetails.getAddInfo2());
		requestDto.setAddinfo3(upiSubMerchantDetails.getAddInfo3());
		requestDto.setAddinfo4(upiSubMerchantDetails.getAddInfo4());
		requestDto.setAddinfo5(upiSubMerchantDetails.getAddInfo5());
		requestDto.setAddinfo6(upiSubMerchantDetails.getAddInfo6());
		requestDto.setAddinfo7(upiSubMerchantDetails.getAddInfo7());
		requestDto.setAddinfo8(upiSubMerchantDetails.getAddInfo8());
		requestDto.setAddinfo9(upiSubMerchantDetails.getAddInfo9());
		requestDto.setAddinfo10(upiSubMerchantDetails.getAddInfo10());
		requestDto.setAdd(upiSubMerchantDetails.getAdd());
		requestDto.setCity(upiSubMerchantDetails.getCity());
		requestDto.setState(upiSubMerchantDetails.getStateCode());
		requestDto.setRequestId(upiSubMerchantDetails.getRequestId());
		requestDto.setCntEmail(upiSubMerchantDetails.getCntEmail());
		requestDto.setStrEmailId(upiSubMerchantDetails.getStrEmailId());
		requestDto.setStrCntMobile(upiSubMerchantDetails.getStrCntMobile());
		requestDto.setSms(upiSubMerchantDetails.getSmsNotification());
		requestDto.setEmail(upiSubMerchantDetails.getEmailNotification());
		requestDto.setMerchantGenre(upiSubMerchantDetails.getMerchantGenre());		
		requestDto.setExtMID(upiSubMerchantDetails.getExtMID());
		requestDto.setExtTID(upiSubMerchantDetails.getExtTID());
		requestDto.setGstn(upiSubMerchantDetails.getGst());
		return new JSONObject(requestDto).toString();
	}

    public String commonMGApi(String apiRequestDto, String url) throws Exception {
    	HttpHeaders headers = new HttpHeaders();
    	headers.setContentType(MediaType.APPLICATION_JSON);
    	log.info("Request {} ", apiRequestDto);
    	HttpEntity<String> httpEntity = new HttpEntity<String>(apiRequestDto, headers);
    	ResponseEntity<String> resp = this.restTemplate.postForEntity(url, httpEntity, String.class);
    	log.info("Response {}", resp);
    	return resp.getBody();
    }