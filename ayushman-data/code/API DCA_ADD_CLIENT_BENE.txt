
YPP-14774 API DCA_ADD_CLIENT_BENE
=================================

private PartnerApisResponse addClientBene(PartnerApisRequest partnerApisRequest, Partner partner) {
        log.info("request to add partner client beneficiary {}, partner Id {}", partnerApisRequest, partner.getId());
        try {
            //Check for missing parameter
            if (StringUtils.isAnyBlank(partnerApisRequest.getP1(), partnerApisRequest.getP2(), partnerApisRequest.getPartnerReferenceNo(), partnerApisRequest.getP6())) {
	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "P006")));
            }
            if (!partnerApisRequest.getP2().matches("^[a-zA-Z0-9./ ]+$")) {
                log.info("Invalid Name {}", partnerApisRequest.getP2());
	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA075")));
            }
            if (StringUtils.isAnyBlank(partnerApisRequest.getP3(), partnerApisRequest.getP4()) && StringUtils.isAnyBlank(partnerApisRequest.getP5())) {
	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "P006")));
            }
            if (!partnerApisRequest.getPartnerReferenceNo().matches("[a-zA-Z0-9]+")) {
                log.info("Invalid Partner Reference Number {}", partnerApisRequest.getPartnerReferenceNo());
	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA068")));
            }
            //Check for client identifier presence
            Optional<PartnerClient> partnerClient = this.partnerClientRepository.findByClientIdentifierAndPartnerId(partnerApisRequest.getP1(), partner.getId());
            if (!partnerClient.isPresent()) {
                log.info("Invalid client identifier {}", partnerApisRequest.getP1());
	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA005")));
            }
            
            if(partnerClient.get().getIsSuspended() == Boolean.TRUE) {
            	 log.info("Client is suspended {}", partnerClient.get().getIsSuspended());
            	 return new PartnerApisResponse(DAErrorCode.CLIENT_IS_SUSPENDED);
            }

            ParameterManagement parameterManagement = parameterManagementRepository.findByName(ParameterManagementEnum.PC_BENE_PURPOSE.name());
            if (parameterManagement != null) {
                if (!(parameterManagement.getValue().contains(partnerApisRequest.getP6()))) {
                    log.info("Invalid Purpose {}", partnerApisRequest.getP6());
   	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA057")));
                }

            }
            if (PartnerClientPurposeEnum.TRADE.equals(partnerClient.get().getPurpose())) {
                log.info("client is onboarded for {}", partnerClient.get().getPurpose());
  	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA057")));
            }
            if (Status.INACTIVE.equals(partnerClient.get().getStatus())) {
                log.info("Client inactive {}", partnerClient.get().getStatus());
 	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA029")));
            }

            //Check for partner reference number already exist
            Optional<PartnerClientBeneficiary> partnerClientBeneficiary = this.partnerClientBeneficiaryRepository.findByPartnerIdAndPartnerReferenceNumber(partner.getId(), partnerApisRequest.getPartnerReferenceNo());
            if (partnerClientBeneficiary.isPresent()) {
                log.info("Invalid partner reference no {}", partnerApisRequest.getPartnerReferenceNo());
	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA023")), partnerClientBeneficiary.get().getBeneficiaryId());
            }

            PartnerClientBeneficiary partnerClientBeneficiaryObj = new PartnerClientBeneficiary();
            //Account number and IFSC code validation
            if (!StringUtils.isAnyBlank(partnerApisRequest.getP3(), partnerApisRequest.getP4())) {
                if (!partnerApisRequest.getP3().matches("[a-zA-Z0-9]+")) {
                    log.info("Invalid beneficiary account no {}", partnerApisRequest.getP3());
    	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA024")));
                }
                if (!RandomUtil.isValidIFSCode(partnerApisRequest.getP4())) {
                    log.info("Invalid beneficiary account IFSC {}", partnerApisRequest.getP4());
   	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA025")));
                }

                Optional<PartnerClientBeneficiary> partnerClientBeneficiaryCheckAccount = this.partnerClientBeneficiaryRepository.findByAccountNumberAndIfscCodeAndPartnerClientIdAndPurpose(partnerApisRequest.getP3(), partnerApisRequest.getP4(), partnerClient.get().getId(), partnerApisRequest.getP6());
                if (partnerClientBeneficiaryCheckAccount.isPresent()) {
                    log.info("Beneficiary account no already exist Account no {} IFSC code {}", partnerApisRequest.getP3(), partnerApisRequest.getP4());
                    if (partnerClientBeneficiaryCheckAccount.get().getPartner().getId().equals(partner.getId())) {
          	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA027")), partnerClientBeneficiaryCheckAccount.get().getBeneficiaryId());
                    } else {
          	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA027")));
                    }
                }
                partnerClientBeneficiaryObj.setAccountNumber(partnerApisRequest.getP3());
                partnerClientBeneficiaryObj.setIfscCode(partnerApisRequest.getP4());
//                partnerClientBeneficiaryObj.setPurpose(partnerApisRequest.getP6());
            }

            //VPA validation
            if (!StringUtils.isAnyBlank(partnerApisRequest.getP5())) {
                if (!RandomUtil.validateUPI(partnerApisRequest.getP5())) {
                    log.info("Invalid beneficiary VPA {}", partnerApisRequest.getP5());
     	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA026")));
                }

                Optional<PartnerClientBeneficiary> partnerClientBeneficiaryCheckVpa = this.partnerClientBeneficiaryRepository.findByVpaAndPartnerClientIdAndPurpose(partnerApisRequest.getP5(), partnerClient.get().getId(), partnerApisRequest.getP6());
                if (partnerClientBeneficiaryCheckVpa.isPresent()) {
                    log.info("Beneficiary VPA already exist {}", partnerApisRequest.getP5());
                    if (partnerClientBeneficiaryCheckVpa.get().getPartner().getId().equals(partner.getId())) {
        	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA028")), partnerClientBeneficiaryCheckVpa.get().getBeneficiaryId());
                    } else {
        	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA028")));
                    }
                }
                partnerClientBeneficiaryObj.setVpa(partnerApisRequest.getP5());
            }
            partnerClientBeneficiaryObj.setPartnerReferenceNumber(partnerApisRequest.getPartnerReferenceNo());
            partnerClientBeneficiaryObj.setBeneficiaryName(partnerApisRequest.getP2());
            partnerClientBeneficiaryObj.setPartner(partner);
            partnerClientBeneficiaryObj.setPartnerClient(partnerClient.get());
            partnerClientBeneficiaryObj.setChannel(ChannelEnum.API);
            partnerClientBeneficiaryObj.setStatus(Status.ACTIVE);
            partnerClientBeneficiaryObj.setPurpose(partnerApisRequest.getP6());
            partnerClientBeneficiaryObj = partnerClientBeneficiaryRepository.save(partnerClientBeneficiaryObj);

            //Response object
            PartnerApisResponse partnerApisResponse = new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "00")));
            partnerApisResponse.setStatus("SUCCESS");
            partnerApisResponse.setBeneficiaryId(partnerClientBeneficiaryObj.getBeneficiaryId());
            partnerApisResponse.setPartnerReferenceNumber(partnerClientBeneficiaryObj.getPartnerReferenceNumber());
            return partnerApisResponse;
        } catch (Exception ex) {
            log.info("Exception in add partner client beneficiary : {}" + ex.getLocalizedMessage());
   		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_DCA_ADD_CLIENT_BENE, "YPP", "", "DCA030")));
        }

    }