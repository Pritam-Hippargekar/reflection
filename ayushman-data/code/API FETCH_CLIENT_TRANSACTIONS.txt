
YPP-14773 API FETCH_CLIENT_TRANSACTIONS
=======================================

private PartnerApisResponse fetchClientTransaction(PartnerApisRequest partnerApisRequest, Partner partner) {
		log.info("request to check fetch Client Transaction with partnerApisRequest : {} And partnerId : {} ",
				partnerApisRequest, partner.getId());
		try {
			// Check for missing parameter
			if (StringUtils.isAnyBlank(partnerApisRequest.getP1(), partnerApisRequest.getRequestId(),
					partnerApisRequest.getP2(), partnerApisRequest.getP3(), partnerApisRequest.getP4())) {
	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(CP_FETCH_CLIENT_TRANSACTIONS, "YPP", "", "P006")));
			}

			// Check for client identifier presence
			Optional<PartnerClient> partnerClientOpt = this.partnerClientRepository
					.findByClientIdentifierAndPartnerId(partnerApisRequest.getP1(), partner.getId());
			if (!partnerClientOpt.isPresent()) {
				log.info("Invalid client identifier {}", partnerApisRequest.getP1());
	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(CP_FETCH_CLIENT_TRANSACTIONS, "YPP", "", "DCA005")));
			}
			PartnerClient pClient = partnerClientOpt.get();
			// Check for page no
			if (!partnerApisRequest.getP4().matches("\\d+")) {
				log.info("Invalid page No {}", partnerApisRequest.getP4());
	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(CP_FETCH_CLIENT_TRANSACTIONS, "YPP", "", "CP003")));
			}

			Instant startDate = RandomUtil.verifyStartDate(partnerApisRequest.getP2());
			if (startDate == null) {
				log.info("Invalid Txn start date {}", partnerApisRequest.getP2());
	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(CP_FETCH_CLIENT_TRANSACTIONS, "YPP", "", "CP004")));
			}

			Instant endDate = RandomUtil.verifyEndDate(partnerApisRequest.getP3());
			if (endDate == null) {
				log.info("Invalid Txn end date {}", partnerApisRequest.getP3());
	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(CP_FETCH_CLIENT_TRANSACTIONS, "YPP", "", "CP005")));
			}

			if (startDate.compareTo(endDate) > 0) {
				log.info("Txn end date {} less than start date {}", partnerApisRequest.getP3(),
						partnerApisRequest.getP2());
	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(CP_FETCH_CLIENT_TRANSACTIONS, "YPP", "", "CP007")));
			}

			if (ChronoUnit.DAYS.between(startDate, endDate) > 30) {
				log.info("Duration between Txn start date {} and end date {} exceed days {}",
						partnerApisRequest.getP2(), partnerApisRequest.getP3(),
						ChronoUnit.DAYS.between(startDate, endDate));
	    		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(CP_FETCH_CLIENT_TRANSACTIONS, "YPP", "", "CP006")));

			}


			// Create criteria for filter
			LimitAccountTransactionsCriteria criteria = new LimitAccountTransactionsCriteria();
			InstantFilter startDateFilter = new InstantFilter();
			startDateFilter.setGreaterThanOrEqual(startDate);
			startDateFilter.setLessThanOrEqual(endDate);
			criteria.setCreatedDate(startDateFilter);

			StringFilter ownerTypeFilter = new StringFilter();
			ownerTypeFilter.setEquals("PARTNER_CLIENT");
			criteria.setOwnerType(ownerTypeFilter);

			LongFilter ownerIdFilter = new LongFilter();
			ownerIdFilter.setEquals(pClient.getId());
			criteria.setOwnerId(ownerIdFilter);

			LongFilter longFilterholdId = new LongFilter();
			longFilterholdId.setEquals(pClient.getLimitAccount().getId());
			criteria.setLimitAccountId(longFilterholdId);

			Pageable pageable = PageRequest.of(Integer.parseInt(partnerApisRequest.getP4()), 20,
					Sort.by("id").descending());
			Page<LimitAccountTransactions> page = limitAccountTransactionsQueryService.findByCriteria(criteria,
					pageable);

			List<LimitAccountTransactions> limitAccountTransactions = page.getContent();
			List<PartnerMerchantTransactionDTO> clientTransactionsList = new ArrayList<>();
			for (LimitAccountTransactions limitAccountTransaction : limitAccountTransactions) {
				PartnerMerchantTransactionDTO clientTransaction = new PartnerMerchantTransactionDTO();
				clientTransaction.setTransactionDate(DateUtil.convertDateToIST(limitAccountTransaction.getCreatedDate()));
				clientTransaction.setAccountEntryType(limitAccountTransaction.getAccountEntryType());
				clientTransaction.setTransactionType(limitAccountTransaction.getTransactionType().name());
				clientTransaction.setTransactionSubType(limitAccountTransaction.getTransactionSubType() != null
						? limitAccountTransaction.getTransactionSubType().name()
						: "");
				clientTransaction.setTransactionAmount(limitAccountTransaction.getAmount());
				clientTransaction.setNarration(null);
				clientTransaction.setNarration(limitAccountTransactionsService.partnerNarration(limitAccountTransaction));
				clientTransactionsList.add(clientTransaction);
			}
			PartnerApisResponse response = new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(CP_FETCH_CLIENT_TRANSACTIONS, "YPP", "", "00")));
			response.setRequestId(partnerApisRequest.getRequestId());
			response.setClientIdentifier(partnerApisRequest.getP1());
			response.setTransactionsList(clientTransactionsList);
			response.setStatus("SUCCESS");
			return response;
		} catch (Exception ex) {
			log.info("Exception in check fetch Client Transaction: ", ex);
   		 return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(CP_FETCH_CLIENT_TRANSACTIONS, "YPP", "", "CP002")));
		}

	}

  @Transactional(readOnly = true)
    public Page<LimitAccountTransactions> findByCriteria(LimitAccountTransactionsCriteria criteria, Pageable page) {
        log.info("find by criteria : {}, page: {}", criteria, page);
        if(null != criteria && !criteria.isEmpty()) {
            log.info("in default find all condition");
            final Specification<LimitAccountTransactions> specification = createSpecification(criteria);
            return limitAccountTransactionsRepository.findAll(specification, page);
        } else {
            log.info("in overriden find all condition ");
            return limitAccountTransactionsRepository.findAll(page);
        }
    }

public String partnerNarration(LimitAccountTransactions accountTransaction) {
        log.info("In Partner client Narration : Transaction Type {}", accountTransaction.getLimitAccountEntry().getTransactionType());
        String narration = "";
        if(StringUtils.isNotEmpty(accountTransaction.getNarration()) && accountTransaction.getOwnerType().equals("PARTNER_CONSUMER")) {
        	narration = accountTransaction.getNarration();
            log.info("Partner client Narration for limit account id {} is {}", accountTransaction.getLimitAccount().getId(), narration);
        	return narration;
        }
        LimitAccountEntry limitAccountEntry = accountTransaction.getLimitAccountEntry();
        LimitReconTransactions limiReconTransactions = limitAccountEntry.getLimitReconTransactions();
        String amount = limitAccountEntry.getAmount().toPlainString();
        String poolAlias = "";
        if (limiReconTransactions != null && !StringUtils.isEmpty(limiReconTransactions.getLimitSystemAccount().getPoolAlias())){
            poolAlias = StringUtils.defaultString(limiReconTransactions.getLimitSystemAccount().getPoolAlias());
        }

        switch (limitAccountEntry.getTransactionType()) {
            case "LIMIT_LOAD":
            	if (!limiReconTransactions.isIsPoolWalletDebited())
					narration = "Spent Rs. "+amount+" towards loading consumer.";
            	else if ((accountTransaction.getTransactionType() != null && accountTransaction.getTransactionSubType() != null) 
            			&& (accountTransaction.getTransactionType().equals(TransactionableTypeEnum.LIMIT_LOAD) 
            			&& accountTransaction.getTransactionSubType().equals(TransactionSubTypeEnum.E_COLLECT))) {
            		narration = "Loaded Rs. " + amount +" in limit account via e-collect.";
            	}
				else
					 narration = "Loaded Rs. " + amount +" in limit account.";
				break; 
            case "RECOVERY":
                narration = "Recovery of Rs. " + amount +" against " + poolAlias  +".";
                break;
            case "LIMIT_SOURCE_TRANSFER":
                narration = "Transferred Rs. "+amount+" to source account through "+poolAlias+".";
                break;
            case "FUND_TRANSFER":
                narration = "Transferred Rs. "+amount+" from limit account through "+poolAlias+".";
                break;
            case "REVERSAL":
                narration = "Reversal of Rs. " + amount +" credited against " + poolAlias + " transaction done on " + DateUtil.convertDateToIST(limiReconTransactions.getTxnDate(), "dd-MM-yyyy HH:mm:ss")+".";
                break;
            case "AUTO_REVERSAL":
                narration = "Reversal of Rs. " + amount +" credited against " + poolAlias + " transaction done on " + DateUtil.convertDateToIST(limiReconTransactions.getTxnDate(), "dd-MM-yyyy HH:mm:ss")+".";
                break;
            case "REFUND":
                narration = "Refund of Rs. " + amount +" credited against "+ poolAlias +" transaction done on " + DateUtil.convertDateToIST(limiReconTransactions.getTxnDate(), "dd-MM-yyyy HH:mm:ss")+".";
                break;
            case "MANUAL_HOLD":
                narration = "Rs. " + amount + " has been put on hold. Reference Number - " + limiReconTransactions.getTxnReferenceNumber() +".";
                break;
            case "MANUAL_HOLD_RELEASE":
                narration = "Hold amount of Rs. " + amount +" with reference number " + limiReconTransactions.getTxnReferenceNumber() + " has been released.";
                break;
            case "AUTO_HOLD_RELEASE":
                narration = "Hold amount of Rs. " + amount +" with reference number " + limiReconTransactions.getTxnReferenceNumber() + " has been released.";
                break;
            case "MERCHANT_DISBURSEMENT":
                narration = "Loaded INR " +amount +" against "+poolAlias+".";
                break;
            case "MERCHANT_DISB_COMM":
                narration = "Transfer of "+amount+" towards partner commission.";
                break;
			case "MERCHANT_SETTLEMENT":
				narration = "Settlement of INR "+amount+" through "+poolAlias+".";
				break;
//			case "PA_COMM_SETTLEMENT":
//				narration = "Settlement of commission of INR "+amount+" through "+poolAlias+".";
//				break;
			case "PENNY_DROP":
				narration = "Transfer of INR "+amount+" towards Penny Drop through "+poolAlias+".";
				break;
			case "SELLER_COLLECTION":
				narration = "Loaded Rs. "+amount+" in limit account via UPI";
				break;
			case "SELLER_SETTLEMENT":
				narration = "Settlement of INR "+amount+" through "+poolAlias+".";
				break;
			case "GIFT_CARD_LOAD":
				narration = "Spent Rs. "+amount+" towards loading Gift Card.";
				break;
			case "DISPUTE_SETTLEMENT": 
				if (!limiReconTransactions.isIsPoolWalletDebited())
					narration = "Recovery of INR "+amount+" towards "+poolAlias+".";
				else
					narration = "Refund of INR "+amount+" from "+poolAlias+".";
				break;
			case "PC_LOAD_VIA_PARTNER":
                narration = "Loaded Rs. " + amount +" in limit account via partner.";
                break;
			case "PC_LOAD_VIA_CLIENT":
                narration = "Loaded Rs. " + amount +" in limit account via client.";
                break;
			case "SELF_FUND_TRANSFER":
				narration = "Transferred Rs. "+amount+" from limit account through "+poolAlias+".";
				break;
			case "CONSUMER_LIMIT_LOAD":
				narration = "Spent Rs. "+amount+" towards loading consumer.";
				break;
			case "CONSUMER_LOAD":
				narration = "Spent Rs. "+amount+" towards loading consumer.";
				break;
			case "ADHOC_FUND_TRANSFER":
				narration = "Transferred Rs. "+amount+" from limit account through "+poolAlias+".";
				break;
			case "ADHOC_RECTIFICATION":
            	narration = "Adhoc txn to rectify balance discrepancy caused due to system issue";
            	break;
			case "PC_C2C_FUND_TRANSFER":
				if(StringUtils.isNotEmpty(limiReconTransactions.getTransactionRemarks())) {
					narration = limiReconTransactions.getTransactionRemarks();
				} else if("CREDIT".equalsIgnoreCase(accountTransaction.getAccountEntryType())) {
					narration = "Credited INR "+amount+" through C2C transfer";
				} else {
					narration = "Debited INR "+amount+" towards C2C transfer.";
				}
				break;
			case "PC_C2C_FT_REVERSAL":
				if(StringUtils.isNotEmpty(limiReconTransactions.getTransactionRemarks())) {
					narration = limiReconTransactions.getTransactionRemarks();
				} else if("CREDIT".equalsIgnoreCase(accountTransaction.getAccountEntryType())) {
					narration = "Reversal of INR "+amount+" against original transaction. Original Ref number - "+ limiReconTransactions.getMerchantReferenceNumber();
				} else {
					narration = "Reversal of INR "+amount+" against original transaction. Original Ref number - "+ limiReconTransactions.getMerchantReferenceNumber();
				}
				break;
			case "AUTO_SOURCE_REFUND":
            	narration = "Auto transferred Rs. "+amount+" from limit account back to source account through "+poolAlias+".";
            	break;
			case "PREPAID_TRANSFER":
				narration = "Spend towards load of Prepaid Wallet";
				break;
			case "MONEY_SEND":
	            	narration = "Spent Rs. "+amount+"  towards card payment through " +poolAlias+".";
	            	break;
	        case "VISA_DIRECT":
	            	narration = "Spent Rs. "+amount+"  towards card payment through " +poolAlias+".";
	            	break;				
        }
        log.info("Partner client Narration for limit account id {} is {}", accountTransaction.getLimitAccount().getId(), narration);
        return narration;
    }