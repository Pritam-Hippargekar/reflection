

YPP-14784 API DCA_VPA_VALIDATION
====================================

public PartnerApisResponse vpaValidation(PartnerApisRequest request, Partner partner) {
		log.info("Request to vpaValidation {} for partner {}", request, partner.getId());
		try {
			if (StringUtils.isAnyBlank(request.getRequestId(), request.getP1(), request.getP2())) {
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VPA_VALIDATION, "YPP", "", "P006")));
			}
			// check for vpa 
	    	if (StringUtils.isNotBlank(request.getP1()) && !request.getP1().matches("^[a-zA-Z0-9.-]{2,256}@[a-zA-Z][a-zA-Z]{2,64}$")) {
	    		log.info("Invalid Beneficiary VPA {}", request.getP1());
	    		return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VPA_VALIDATION, "YPP", "", "DCA100")));
    		}
	    	Optional<PartnerDASetup> partnerDASetupInfo = partnerDASetupRepository.findByPartnerId(partner.getId());
		    if (!partnerDASetupInfo.isPresent()) {
				log.info("Invalid client config missing {}", partner.getId());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VPA_VALIDATION, "YPP", "", "DCA099")));
			}
		    Optional<PartnerClient> partnerClient = partnerClientRepository.findByClientIdentifierAndPartnerId(request.getP2(), partner.getId());
			if (!partnerClient.isPresent()) {
				log.info("Invalid Partner client {}", request.getP2());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VPA_VALIDATION, "YPP", "", "DCA005")));
			}
			if (partnerClient.get().getStatus().equals(Status.INACTIVE)) {
				log.info("Invalid Partner client {} not active", request.getP2());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VPA_VALIDATION, "YPP", "", "DCA029")));
			}
			if(partnerClient.get().getIsSuspended()) {
				log.info("Client is suspended {}", partnerClient.get().getIsSuspended());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VPA_VALIDATION, "YPP", "", "DCA102")));
			}
			if(!(partnerClient.get().getPurpose().equals(PartnerClientPurposeEnum.DC_AGGREGATOR))) {
				log.info("Invalid Client is not eligible for this purpose  {}", partner.getId());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VPA_VALIDATION, "YPP", "", "DCA057")));
			}
		    Optional<UpiSubMerchantDetails> upiSubMerchantDetailsInfo = upiSubMerchantDetailsRepository.findByOwnerIdAndOwnerTypeAndUpiOnboardingStatus(partnerClient.get().getId(), UpiSubMerchantDetailsOwnerTypeEnum.PARTNER_CLIENT, UpiSubMerchantDetailsUpiOnboardingStatusEnum.SUCCESS);
			if (!upiSubMerchantDetailsInfo.isPresent()) {
				log.info("Merchant not created at switch {}", partner.getId());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VPA_VALIDATION, "YPP", "", "DCA103")));
			}
			if (!UpiSubMerchantDetailsStatusEnum.ACTIVE.equals(upiSubMerchantDetailsInfo.get().getStatus())) {
				log.info("UPI Merchant is INACTIVE {}", upiSubMerchantDetailsInfo.get().getId());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VPA_VALIDATION, "YPP", "", "DCA115")));
			}
			// mind gate validate vpa api call
			JSONObject requestJson = new JSONObject().put("merchantId", upiSubMerchantDetailsInfo.get().getSubMerchantId()).put("merchantTxnId", partner.getPartnerCode() + Instant.now().getEpochSecond())
					.put("vpa", request.getP1());
			MgApiRequestDto mgApiRequestDto = new MgApiRequestDto(Constants.DCA, requestJson.toString(), upiSubMerchantDetailsInfo.get().getSubMerchantId()); // TODO
			String apiResponse = null;
			if (Arrays.asList(env.getActiveProfiles()).contains("prod")) {
				apiResponse = commonApiService.commonMGApi(new JSONObject(mgApiRequestDto).toString(), validateVpaUrl);
			} else {
				apiResponse = dummyApiResponseRepository.findByKeyAndApiNameAndValue("Upi", ApiNameEnum.UPI_VPA_VALIDATION, partnerClient.get().getClientIdentifier()).orElse(new DummyApiResponse()).getApiResponse();
				if (StringUtils.isBlank(apiResponse))
					apiResponse = commonApiService.commonMGApi(new JSONObject(mgApiRequestDto).toString(), validateVpaUrl);
			}	
			CheckVpaResponseParameterDto responseDto = new ObjectMapper().readValue(apiResponse, CheckVpaResponseParameterDto.class);
			if (null != responseDto && null != responseDto.getStatus() && "VE".equalsIgnoreCase(responseDto.getStatus())) {
				PartnerApisResponse response = new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VPA_VALIDATION, "YPP", "", "00")));
				response.setStatus("SUCCESS");
				response.setVpaStatus("VPA is valid");
				response.setCustomerName(responseDto.getMaskName());
				return response;
			} else if (null != responseDto && null != responseDto.getStatus() && Arrays.asList("F", "VN").contains(responseDto.getStatus())) {
				log.info("Invalid VPA {}, vpa not present at switch", request.getP1());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VPA_VALIDATION, "YPP", "", "DCA100")));
			} else {
				log.info("Invalid VPA {}, vpa not present at switch", request.getP1());
				return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VPA_VALIDATION, "YPP", "", "DCA101")));
			}
		} catch (Exception e) {
			log.error("Exception in vpaValidation: {}", e.getMessage(), e);
			return new PartnerApisResponse(ErrorCodeService.getMappedErrorCodeAndMessage(new ErrorCode(DCA_VPA_VALIDATION, "YPP", "", "DCA101")));
		}
	}

    public String commonMGApi(String apiRequestDto, String url) throws Exception {
    	HttpHeaders headers = new HttpHeaders();
    	headers.setContentType(MediaType.APPLICATION_JSON);
    	log.info("Request {} ", apiRequestDto);
    	HttpEntity<String> httpEntity = new HttpEntity<String>(apiRequestDto, headers);
    	ResponseEntity<String> resp = this.restTemplate.postForEntity(url, httpEntity, String.class);
    	log.info("Response {}", resp);
    	return resp.getBody();
    }