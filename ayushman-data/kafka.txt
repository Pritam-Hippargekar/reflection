https://www.metricstream.com/blog/improve-platform-resilience-kafka-based-systems.html
https://www.clairvoyant.ai/blog/unleash-kafka-producers-architecture-and-internal-workings






transaction.setTitle("Paid towards"+" "+operatorName+" recharge - "+mobileNumber);

transactionListView.setInfo1(operatorName+" Recharge of "+ mobileNumber);






https://thepracticaldeveloper.com/spring-boot-kafka-config/
https://arnoldgalovics.com/reliable-kafka-messaging-spring-boot/


zookeeper-server-start.bat ..\..\config\zookeeper.properties
kafka-server-start.bat ..\..\config\server.properties
kafka-topics.bat --create --topic my-topic --bootstrap-server localhost:9092 --replication-factor 1 --partitions 3
//[kafka directory]\bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic [topic name]
kafka-console-producer.bat --broker-list localhost:9092 --topic my-topic
kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic my-topic --from-beginning
//kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic [topic name] --from-beginning


ListenableFuture<SendResult<String, String>> future = this.kafkaTemplate.send(TOPIC, message);
future.addCallback(new ListenableFutureCallback<>() {
    @Override
    public void onFailure(Throwable ex) {
    logger.info("Unable to send message=[ {} ] due to : {}", message, ex.getMessage());
    }

    @Override
    public void onSuccess(SendResult<String, String> result) {
    logger.info("Sent message=[ {} ] with offset=[ {} ]", message, result.getRecordMetadata().offset());
    }
});


@KafkaListener(id = "normal-topic-consumer", groupId = "normal-topic-group", topics = "normal-topic")
public void consume(ConsumerRecord<?, ?> consumerRecord, Acknowledgment ack) {
    log.info("Getting consumer record key: '" + consumerRecord.key() + "', value: '" + consumerRecord.value() + "', partition: " + consumerRecord.partition() + " and offset: " + consumerRecord.offset() + " at " + new Date(consumerRecord.timestamp()));
    String json = consumerRecord.value().toString();
    log.info("Consuming normal message {}", json);
    ack.acknowledge();
}








ERROR
When the application is running in the ERROR log, the  WARN, INFO, DEBUG and TRACE type logs are not logged.

WARN
When the application log level is WARN, this will log both WARN as well as ERROR type logs into the logging system.

INFO
When the log level for the entire application is set to INFO, then both the WARN and ERROR logs are also logged into the logging system.

DEBUG
Enabling DEBUG level at the application level will cause INFO, WARN and ERROR logs to be also sent to the logging system.
 
TRACE
Enabling TRACE will enable all the subsequent log levels and is not at all recommended in the production environment.