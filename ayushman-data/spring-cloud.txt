#https://github.com/Java-Techie-jt/jwt-apigateway-security/blob/main/swiggy-gateway/src/main/java/com/javatechie/filter/AuthenticationFilter.java
spring:
 cloud:
   gateway:
     routes:
       - id: swiggy-app
         uri: lb://SWIGGY-APP
         predicates:
           - Path=/swiggy/**
         filters:
           - AuthenticationFilter

       - id: restaurant-service
         uri: lb://RESTAURANT-SERVICE
         predicates:
           - Path=/restaurant/**    #- Method=POST
         filters:
           - AuthenticationFilter

       - id: identity-service
         uri: lb://IDENTITY-SERVICE
         predicates:
           - Path=/auth/**

 application:
   name: SWIGGY-GATEWAY

eureka:
  client:
    service-url:
      defaultZone : http://localhost:8761/eureka/


 @Bean
    public RouteLocator myRoutes(RouteLocatorBuilder builder) {
        return builder.routes()
                .route("simple_route", r -> r
                        .path("/get") // intercept calls to the /get path
						.uri("http://httpbin.org"))// forward to httpbin
                .route("external_route", r -> r
                        .path("/external-api/**")
                        .filters(f -> f.stripPrefix(1)) // external-api should disappear from url
                        .uri("http://httpbin.org"))// forward to httpbin
                .route("host_route", r -> r
                        .host("*.apig.org")
                        .uri("http://httpbin.org"))// forward to httpbin
                .build();
    }

    @Bean
     public RouteLocator routeLocator(RouteLocatorBuilder builder) {
      return builder.routes()
       .route("get_route", r -> r.path("/get")
        .method("GET")
        .uri("http://httpbin.org"))
       .route("post_route", r -> r.path("/post")
        .method("POST")
        .uri("http://httpbin.org"))
       .build();
     }




 spring:
     cloud:
     gateway:
       globalcors:
         corsConfigurations:
           '[/**]':
             allowedOrigins: '*'
             allowedMethods:
               - POST
               - GET
               - PUT
               - OPTIONS
               - DELETE
       routes:
         - id: a-service
           uri: http://localhost:18081
           predicates:
             - Path=/aservice/**
         - id: b-service
           uri: http://localhost:18082
           predicates:
             - Path=/bservice/**



     @Bean
     public RouteLocator bRoue(RouteLocatorBuilder builder) {
         return builder.routes()
             .route("q-service", r -> r.path("/q-service/**")
                 .uri("http://localhost:18081"))
             .route("q-service", r -> r.path("/w-service/**")
                 .uri("http://localhost:18080"))
             .build();
     }

     @Bean
     public RouteLocator cRoute(RouteLocatorBuilder builder) {
         return builder.routes()
             .route("c-service", r -> r.path("/c-service/**")
                 .uri("http://localhost:18081"))
             .route("d-service", r -> r.path("/d-service/**")
                 .uri("http://localhost:18080"))
             .build();
     }


 Ex 2.

 @Bean
 public RouteLocator myRoutes(RouteLocatorBuilder builder) {
     return builder.routes()
         .route(p -> p
             .path("/get")
             .filters(f -> f.addRequestHeader("Hello", "World"))
             .uri("http://httpbin.org:80"))
         .route(p -> p
             .host("*.hystrix.com")
             .filters(f -> f.hystrix(config -> config
                 .setName("mycmd")
                 .setFallbackUri("forward:/fallback")))
             .uri("http://httpbin.org:80"))
         .build();
 }
 @RequestMapping("/fallback")
 public Mono<String> fallback() {
   return Mono.just("fallback");
 }https://m.blog.naver.com/kbh3983/222196470651