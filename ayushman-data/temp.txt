
uploadedBy binlistrecord  ==  should come emailId




catch (Exception e) {
                   log.error("Exception in transfer funds to: {}",e.getMessage(), e);
               }






QA : 
system@localhost
admin
===================================== VA-ACTIVATE-UPI-PAYOUT
gaurav.p@sodelsolutions.com
admin


UAT :
ronak.n@sodelsolutions.com
Sodel@#123
-------------------------
ashish.gode@sodelsolutions.com
admin



pritam.h@sodelsolutions.com
admin

partnerDASetup       bbps_recharge_config
partnerDaApiAccess   bbps_api_access



 A topic with 3 partitions and 2 replicas spread across 3 brokers.   










Unit	Equivalent
1 kilobyte (KB)	1,024 bytes
1 megabyte (MB)	(1024x1024) 1,048,576 bytes       1 MB is 1,024 kilobytes   
1 gigabyte (GB)	1,073,741,824 bytes               
1 terabyte (TB)	1,099,511,627,776 bytes           
1 petabyte (PB)	1,125,899,906,842,624 bytes        

FT3APIResponseDto


  spring.datasource.mysql.hikari.jdbc-url=jdbc:mysql://localhost:3306/schema_mysql?useSSL=false&allowPublicKeyRetrieval=true
  spring.datasource.mysql.hikari.username=root
  spring.datasource.mysql.hikari.password=root
  spring.datasource.mysql.hikari.driver-class-name=com.mysql.cj.jdbc.Driver
  spring.datasource.mysql.hikari.connection-timeout=60000
  spring.datasource.mysql.hikari.minimum-idle=11
  spring.datasource.mysql.hikari.maximum-pool-size=17 
  spring.datasource.mysql.hikari.idle-timeout=10000
  spring.datasource.mysql.hikari.max-lifetime=300000
  spring.datasource.mysql.hikari.auto-commit=true
  spring.datasource.mysql.hikari.type=com.zaxxer.mysql.hikari.HikariDataSource
  spring.datasource.mysql.hikari.pool-name=MysqlPool

  spring.jpa.properties.mysql.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
  spring.jpa.properties.mysql.hibernate.hbm2ddl.auto=update
  spring.jpa.properties.mysql.hibernate.show_sql=true
  spring.jpa.properties.mysql.hibernate.use_sql_comments=true
  spring.jpa.properties.mysql.hibernate.format_sql=true
  spring.jpa.properties.mysql.hibernate.type=trace





#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://<ip-address>:<port>/<database-name>?useUnicode=true&characterEncoding=utf8
#spring.datasource.username=<username>
#spring.datasource.password=<password>
#
## Use spring.jpa.properties.* for Hibernate native properties (the prefix is stripped before adding them to the entity manager)
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true
#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect




AvailableSettings
https://blogs.ashrithgn.com/multiple-data-source-in-spring-boot-using-spring-boot-data-starter/


https://attacomsian.com/blog/java-compare-dates
isAfter() — Return true if this date is after the specified date.
isBefore() — Return true if this date is before the specified date.
isEqual() — Return true if this date is equal to the specified date.
compareTo() — Returns the comparator value, negative if less, positive if greater.

LocalDate date1 = LocalDate.parse("2018-04-12");
LocalDate date2 = LocalDate.parse("2019-07-17");
// compare `LocalDate` instances

System.out.println(date1 + " is BEFORE " + date2 + ": " + date1.isBefore(date2));      
System.out.println(date1 + " is AFTER " + date2 + ": " + date1.isAfter(date2));        
System.out.println(date1 + " is EQUAL to " + date2 + ": " + date1.isEqual(date2));

The above code will print the following on the console:
2018-04-12 is BEFORE 2019-07-17: true
2018-04-12 is AFTER 2019-07-17: false
2018-04-12 is EQUAL to 2019-07-17: false


LocalDate date1 = LocalDate.of(2018, Month.JULY, 12);
LocalDate date2 = LocalDate.of(2016, Month.AUGUST, 25);
// compare dates

int diff = date1.compareTo(date2);
if (diff == 0) {
    System.out.println(date1 + " is EQUAL to " + date2);
} else if (diff > 0) {
    System.out.println(date1 + " is AFTER " + date2);
} else {
    System.out.println(date1 + " is BEFORE " + date2);
}

You will see the following output if you execute the above code:
2018-07-12 is AFTER 2016-08-25



public class Base {
    private String data = null;

    public Base() {
        data = "default";
        System.out.println("Base()");
    }

    public Base(String arg1) {
        data = arg1;
        System.out.println("Base("+arg1+")");
    }
    public Base(String a, String b, String c){
        //Constructor<?> ctr = myClass.getConstructor(String.class, String.class, String.class);
        //Object object = ctr.newInstance(new Object[] { "Arg1", "Arg2", "Arg3" }); 
    }   
}

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

public class Main {

    public static void main(String args[]) throws ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {

        // Get class name as string.
        String myClassName = Base.class.getName();  //fully class name.
        // Create class of type Base.
        Class<?> myClass = Class.forName(myClassName);
        // Create constructor call with argument types.
        Constructor<?> ctr = myClass.getConstructor(String.class);
        // Finally create object of type Base and pass data to constructor.
        String arg1 = "My User Data";
        Object object = ctr.newInstance(new Object[] { arg1 });
        // Type-cast and access the data from class Base.
        Base base = (Base)object;
        System.out.println(base.data);
    }

}


Note :: public Constructor only.(getConstructors)
======================================================
    Class<?> clazz = Class.forName(FULLY_QUALIFIED_CLASS_NAME);
    Constructor<?> myConstructor = clazz.getConstructors()[0];
    Object classObject = myConstructor.newInstance(new Object[]{"contstractorArgs"});
    Object result = clazz.getDeclaredMethods()[0].invoke(classObject, Object... methodArgs);

Note :: private Constructor only.(getDeclaredConstructor)
===========================================================
    // Get Class instance
    Class<?> clazz = Class.forName("com.pritam.MyClass");
    // Get the private constructor.
    Constructor<?> cons = clazz.getDeclaredConstructor();
    // Since it is private, make it accessible.
    cons.setAccessible(true);
    // Create new object. 
    Object obj = cons.newInstance();// invoke empty constructor


Class<?> aClass = Class.forName(FULLY_QUALIFIED_CLASS_NAME);
Method method = aClass.getMethod(methodName, YOUR_PARAM_1.class, YOUR_PARAM_2.class);
method.invoke(OBJECT_TO_RUN_METHOD_ON, YOUR_PARAM_1, YOUR_PARAM_2);



Field field = object.getClass().getDeclaredField(fieldName);    
  field.setAccessible(true);
  Object value = field.get(object);

Class<?> thisClass = Class.forName(this.getClass().getName());
//Field field = thisClass.getDeclaredFields(); 
Field field = object.getClass().getDeclaredFields();    
  field.setAccessible(true);
  String fieldName = field.getName();
  String fieldType = field.getType();
  Object fieldValue = field.get(object);



package com.mypackage.bean;
public class Dog {
    private String name;
    private int age;

    public Dog() {
        // empty constructor
    }

    public Dog(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void printDog(String name, int age) {
        System.out.println(name + " is " + age + " year(s) old.");
    }
}

package com.mypackage.demo;
import java.lang.reflect.*;
public class ReflectionDemo {

    public static void main(String[] args) throws Exception {
        String dogClassName = "com.mypackage.bean.Dog";
        Class<?> dogClass = Class.forName(dogClassName); // convert string classname to class
        Object dog = dogClass.newInstance(); // invoke empty constructor

        String methodName = "";

        // with single parameter, return void
        methodName = "setName";
        Method setNameMethod = dog.getClass().getMethod(methodName, String.class);
        setNameMethod.invoke(dog, "Mishka"); // pass arg

        // without parameters, return string
        methodName = "getName";
        Method getNameMethod = dog.getClass().getMethod(methodName);
        String name = (String) getNameMethod.invoke(dog); // explicit cast

        // with multiple parameters
        methodName = "printDog";
        Class<?>[] paramTypes = {String.class, int.class};
        Method printDogMethod = dog.getClass().getMethod(methodName, paramTypes);
        printDogMethod.invoke(dog, name, 3); // pass args
    }
}
Output: Mishka is 3 year(s) old.



public static Object launchProcess(String className, String methodName, Class<?>[] argsTypes, Object[] methodArgs)
        throws Exception {

    Class<?> processClass = Class.forName(className); // convert string classname to class
    Object process = processClass.newInstance(); // invoke empty constructor

    Method aMethod = process.getClass().getMethod(methodName,argsTypes);
    Object res = aMethod.invoke(process, methodArgs); // pass arg
    return(res);
}
// Call above method.
String className = "com.example.helloworld";
String methodName = "print";
Class<?>[] argsTypes = {String.class,  String.class};
Object[] methArgs = { "hello", "world" };   
launchProcess(className, methodName, argsTypes, methArgs);


https://github.com/NLPchina/elasticsearch-sql/blob/master/src/main/java/org/nlpcn/es4sql/query/maker/Maker.java#L156
x = QueryBuilders.scriptQuery(new Script(scriptFilter.getScriptType(), Script.DEFAULT_SCRIPT_LANG,scriptFilter.getScript(), params));

Map<String, Object> lockObject = lockObject(lockConfiguration.getName(),
            lockConfiguration.getLockAtMostUntil(),
            now());
        UpdateRequest ur = new UpdateRequest()
            .index(index)
            .type(type)
            .id(lockConfiguration.getName())
            .script(new Script(ScriptType.INLINE,
                "painless",
                UPDATE_SCRIPT,
                lockObject)
            )
            .upsert(lockObject)
            .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);
        UpdateResponse res = highLevelClient.update(ur, RequestOptions.DEFAULT);

private static final String UPDATE_SCRIPT =
        "if (ctx._source." + LOCK_UNTIL + " <= " + "params." + LOCKED_AT + ") { " +
            "ctx._source." + LOCKED_BY + " = params." + LOCKED_BY + "; " +
            "ctx._source." + LOCKED_AT + " = params." + LOCKED_AT + "; " +
            "ctx._source." + LOCK_UNTIL + " =  params." + LOCK_UNTIL + "; " +
            "} else { " +
            "ctx.op = 'none' " +
            "}";




TransportClient esClient = EsClient.getInstance();
UpdateRequest updateRequest = new UpdateRequest("notes2", "note", "2");
Map<String, Object> params = new HashMap() {
    {
        put("click_count", 120);
        put("impr_count", 5);
    }
};
String code = "ctx._source.click_count=params.click_count;ctx._source.impr_count=params.impr_count;ctx._source.ctr=(double)ctx._source.click_count/ctx._source.impr_count*100";
Script script = new Script(ScriptType.INLINE,  Script.DEFAULT_SCRIPT_LANG, code, params);
updateRequest.script(script);
updateRequest.retryOnConflict(3);
esClient.update(updateRequest).get();

https://blog.csdn.net/UbuntuTouch/article/details/115692778



 Script.DEFAULT_SCRIPT_LANG





   private Script createTagScript(Tag[] tags) {
        return new Script(ScriptType.INLINE, "painless",
                "int updates = 0;" +
                        "if (ctx._source.tags == null) ctx._source.tags = [];" +
                        "for (int i = 0; i < params.tags.length; i++) {" +
                        "  if (!ctx._source.tags.contains(params.tags[i])) {" +
                        "   ctx._source.tags.add(params.tags[i]);" +
                        "   updates++;" +
                        "  }" +
                        "}" +
                        "if (updates == 0) ctx.op = 'noop';",
                new HashMap<String, Object>() {{put("tags", stream(tags).map(t -> t.label).collect(toList()));}});
    }

    private Script createUntagScript(Tag[] tags) {
        return new Script(ScriptType.INLINE, "painless",
                "int updates = 0;" +
                        "for (int i = 0; i < params.tags.length; i++) {" +
                        "  if (ctx._source.tags.contains(params.tags[i])) {" +
                        "    ctx._source.tags.remove(ctx._source.tags.indexOf(params.tags[i]));" +
                        "    updates++;" +
                        "  }" +
                        "}" +
                        "if (updates == 0) ctx.op = 'noop';",
                new HashMap<String, Object>() {{put("tags", stream(tags).map(t -> t.label).collect(toList()));}});
    }


    private FunctionScoreQueryBuilder getFunctionScoreQueryBuilder(QueryBuilder queryBuilder){
        Script script = new Script(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG, inlineScript, params);
        ScriptScoreFunctionBuilder scoreFunction = ScoreFunctionBuilders.scriptFunction(script);
        return new FunctionScoreQueryBuilder(queryBuilder, scoreFunction);
    }




    Elasticsearch + Java REST Client [7.10] » Java High Level REST Client » Search APIs
ตัวอย่างคร่าวๆนะครับ

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.zengcode</groupId>
    <artifactId>spring-boot-docker</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>spring-boot-docker</name>
    <description>Spring Boot on Docker</description>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.elasticsearch</groupId>
            <artifactId>elasticsearch</artifactId>
            <version>7.10.1</version>
        </dependency>
        <dependency>
            <groupId>org.elasticsearch.client</groupId>
            <artifactId>elasticsearch-rest-high-level-client</artifactId>
            <version>7.10.1</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
Code ตัวอย่าง

package com.zengcode.elasticsearch.configuration;

import org.apache.http.HttpHost;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestClientBuilder;
import org.elasticsearch.client.RestHighLevelClient;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ApplicationConfiguration {

    @Bean
    public RestHighLevelClient restHighLevelClient(){
        final CredentialsProvider credentialsProvider =new BasicCredentialsProvider();
        credentialsProvider.setCredentials(AuthScope.ANY,new UsernamePasswordCredentials("user", "password"));
        RestClientBuilder builder =RestClient.builder(
                new HttpHost("localhost", 9002, "http")
        ).setHttpClientConfigCallback(httpClientBuilder -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));

        RestHighLevelClient client = new RestHighLevelClient(builder);
        return client;
    }
}
package com.zengcode.elasticsearch.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.client.indices.CreateIndexRequest;
import org.elasticsearch.client.indices.CreateIndexResponse;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.unit.Fuzziness;
import org.elasticsearch.common.unit.TimeValue;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.index.query.MatchQueryBuilder;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.aggregations.AggregationBuilders;
import org.elasticsearch.search.aggregations.metrics.AvgAggregationBuilder;
import org.elasticsearch.search.aggregations.metrics.SumAggregationBuilder;
import org.elasticsearch.search.builder.SearchSourceBuilder;
import org.elasticsearch.search.sort.FieldSortBuilder;
import org.elasticsearch.search.sort.ScoreSortBuilder;
import org.elasticsearch.search.sort.SortOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

@RestController
public class ElasticSearchController {

    @Autowired
    private RestHighLevelClient client;

    @GetMapping(value = "/create")
    public String ping() throws IOException {
        CreateIndexRequest request = new CreateIndexRequest("users");
        request.settings(Settings.builder()
                .put("index.number_of_shards", 1)
                .put("index.number_of_replicas", 2)
        );
        Map<String, Object> message = new HashMap<>();
        message.put("type", "text");
        Map<String, Object> properties = new HashMap<>();
        properties.put("userId", message);
        properties.put("name", message);
        Map<String, Object> mapping = new HashMap<>();
        mapping.put("properties", properties);
        request.mapping(mapping);
        CreateIndexResponse indexResponse = client.indices().create(request, RequestOptions.DEFAULT);
        return "created";
    }

    @GetMapping(value = "/upsert")
    public String upsert() throws IOException {
        IndexRequest request = new IndexRequest("users");
        Map<String, Object> users = new HashMap<>();
        users.put("id", "001");
        users.put("name", "Chiwa Kantawong");
        users.put("age", 25);
        request.id(users.get("id").toString());
        request.source(new ObjectMapper().writeValueAsString(users), XContentType.JSON);
        IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);
        System.out.println("response id: "+indexResponse.getId());

        users = new HashMap<>();
        users.put("id", "002");
        users.put("name", "Pea Kantawong");
        users.put("age", 24);
        request.id(users.get("id").toString());
        request.source(new ObjectMapper().writeValueAsString(users), XContentType.JSON);
         indexResponse = client.index(request, RequestOptions.DEFAULT);
        return "success";
    }

    @GetMapping(value = "delete")
    public String delete() throws IOException {
        DeleteRequest request = new DeleteRequest("users","001");
        DeleteResponse deleteResponse = client.delete(request,RequestOptions.DEFAULT);
        return deleteResponse.getId();
    }
//partial update
@GetMapping(value = "update")
public UpdateResponse update() throws IOException {
    Map<String, Object> jsonMap = new HashMap<>();
    jsonMap.put("reason", "daily update");
    UpdateRequest request = new UpdateRequest("users","001")
            .doc(jsonMap);

    UpdateResponse updateResponse = client.update(request,RequestOptions.DEFAULT);
    return updateResponse;
}
@GetMapping(value = "get")
public GetResponse get() throws IOException {

    GetRequest request = new GetRequest(
            "users",
            "001");
  
    GetResponse getResponse = client.get(request, RequestOptions.DEFAULT);
    return getResponse;
}
@GetMapping(value = "getSource")
public GetSourceResponse getSource() throws IOException {

    GetSourceRequest request = new GetSourceRequest(
            "users",
            "001");
    GetSourceResponse getResponse = client.getSource(request, RequestOptions.DEFAULT);
    return getResponse;
}
    @GetMapping(value = "search1")
    public SearchResponse search1() throws IOException {
        QueryBuilder matchQueryBuilder = QueryBuilders.matchQuery("name", "Chiwa Kantawong");

        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();
        sourceBuilder.query(matchQueryBuilder);

        SearchRequest searchRequest = new SearchRequest("users");
        searchRequest.source(sourceBuilder);
        SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);
        return searchResponse;
    }

    @GetMapping(value = "search2")
    public SearchResponse search2() throws IOException {
        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();
        sourceBuilder.query(QueryBuilders.matchQuery("name", "Chiwa"))
                .from(0)
                .size(100)
                .timeout(new TimeValue(3, TimeUnit.MINUTES))
                .sort(new FieldSortBuilder("_id").order(SortOrder.ASC))
                .sort(new ScoreSortBuilder().order(SortOrder.DESC));

        SearchRequest searchRequest = new SearchRequest();
        searchRequest.indices("users");
        searchRequest.source(sourceBuilder);

        SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);
        return searchResponse;
    }

    @GetMapping(value = "search3")
    public SearchResponse search3() throws IOException {
        QueryBuilder matchQueryBuilder = QueryBuilders.matchAllQuery();

        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();
        sourceBuilder.query(matchQueryBuilder);

        SearchRequest searchRequest = new SearchRequest("users");
        searchRequest.source(sourceBuilder);
        SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);
        return searchResponse;
    }

    @GetMapping(value = "search4")
    public SearchResponse search4() throws IOException {
        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();
        sourceBuilder.query(QueryBuilders.termQuery("name", "Chiwa Kantawong"))
                .from(0)
                .size(100)
                .timeout(new TimeValue(3, TimeUnit.MINUTES))
                .sort(new FieldSortBuilder("_id").order(SortOrder.ASC))
                .sort(new ScoreSortBuilder().order(SortOrder.DESC));

        SearchRequest searchRequest = new SearchRequest();
        searchRequest.indices("users");
        searchRequest.source(sourceBuilder);

        SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);
        return searchResponse;
    }

    @GetMapping(value = "search5")
    public SearchResponse search5() throws IOException {
        MatchQueryBuilder matchQueryBuilder = new MatchQueryBuilder("name", "Chiwa Kantawong");
        matchQueryBuilder
                .fuzziness(Fuzziness.AUTO)
                .prefixLength(3)
                .maxExpansions(10);

        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();
        sourceBuilder.query(matchQueryBuilder);
        SearchRequest searchRequest = new SearchRequest();
        searchRequest.indices("users");
        searchRequest.source(sourceBuilder);

        SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);

        return searchResponse;
    }

    @GetMapping(value = "search6")
    public SearchResponse search6() throws IOException {

        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
        AvgAggregationBuilder aggregation =  AggregationBuilders.avg("avg_age").field("age");
        SumAggregationBuilder aggregation2 =  AggregationBuilders.sum("sum_age").field("age");

        searchSourceBuilder.aggregation(aggregation);
        searchSourceBuilder.aggregation(aggregation2);

        SearchRequest searchRequest = new SearchRequest();
        searchRequest.indices("users");
        searchRequest.source(searchSourceBuilder);

        SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);

        return searchResponse;
    }

    @GetMapping(value = "search7")
    public SearchResponse search7() throws IOException {
        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();
        sourceBuilder.query(QueryBuilders.matchQuery("name", "Kantawong"))
                .from(0)
                .size(100)
                .timeout(new TimeValue(3, TimeUnit.MINUTES))
                .sort(new FieldSortBuilder("_id").order(SortOrder.ASC))
                .sort(new ScoreSortBuilder().order(SortOrder.DESC))
         .fetchSource(false);

        AvgAggregationBuilder aggregation =  AggregationBuilders.avg("avg_age").field("age");
        SumAggregationBuilder aggregation2 =  AggregationBuilders.sum("sum_age").field("age");

        sourceBuilder.aggregation(aggregation);
        sourceBuilder.aggregation(aggregation2);

        SearchRequest searchRequest = new SearchRequest();
        searchRequest.indices("users");
        searchRequest.source(sourceBuilder);

        SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);
        return searchResponse;
    }
@GetMapping(value = "search8")
public SearchResponse search8() throws IOException {
    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();
    sourceBuilder.query(QueryBuilders.matchQuery("name", " Kantawong"))
            .postFilter(QueryBuilders.rangeQuery("age").from(25).to(null)) //gt 24
            .from(0)
            .size(100)
            .timeout(new TimeValue(3, TimeUnit.MINUTES))
            .sort(new FieldSortBuilder("_id").order(SortOrder.ASC))
            .sort(new ScoreSortBuilder().order(SortOrder.DESC));

    SearchRequest searchRequest = new SearchRequest()
            .indices("users")
            .source(sourceBuilder);

    SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);
    return searchResponse;
}
@GetMapping(value = "search9")
public SearchResponse search9() throws IOException {
    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();
    sourceBuilder.query(QueryBuilders.matchAllQuery())
            .postFilter(QueryBuilders.rangeQuery("age").gte(25))
            .from(0)
            .size(100)
            .timeout(new TimeValue(3, TimeUnit.MINUTES))
            .sort(new FieldSortBuilder("_id").order(SortOrder.ASC))
            .sort(new ScoreSortBuilder().order(SortOrder.DESC));

    SearchRequest searchRequest = new SearchRequest()
            .indices("users")
            .source(sourceBuilder);

    SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);
    return searchResponse;
}


@GetMapping(value = "search10")
public SearchResponse search10() throws IOException {
    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();
    sourceBuilder.query(QueryBuilders.matchAllQuery())
            .postFilter(QueryBuilders.rangeQuery("age").lt(25))
            .from(0)
            .size(100)
            .timeout(new TimeValue(3, TimeUnit.MINUTES))
            .sort(new FieldSortBuilder("_id").order(SortOrder.ASC))
            .sort(new ScoreSortBuilder().order(SortOrder.DESC));

    SearchRequest searchRequest = new SearchRequest()
            .indices("users")
            .source(sourceBuilder);

    SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);
    return searchResponse;
}
@GetMapping(value = "search11")
public SearchResponse search11() throws IOException {
    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();

    MatchQueryBuilder A = QueryBuilders.matchQuery("name", "Chiwa");
    MatchQueryBuilder B = QueryBuilders.matchQuery("name", "Pea");
    MatchQueryBuilder C = QueryBuilders.matchQuery("name", "Kantawong");

    RangeQueryBuilder D = QueryBuilders.rangeQuery("age").lte(25);

    //1.(A AND B AND C)
    BoolQueryBuilder query1 = QueryBuilders.boolQuery();
    query1.must(A).must(B).must(C);

    //2.(A OR B OR C)
    BoolQueryBuilder query2 = QueryBuilders.boolQuery();
    query2.should(A).should(B).should(C);

    //2.(A AND C)
    BoolQueryBuilder query3 = QueryBuilders.boolQuery();
    query3.must(A).must(C).must(D);

    //Compound
    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
    boolQueryBuilder.must(query2).should(query3);

    sourceBuilder.query(query3);

    SearchRequest searchRequest = new SearchRequest()
            .indices("users")
            .source(sourceBuilder);

    SearchResponse searchResponse = client.search(searchRequest,RequestOptions.DEFAULT);
    return searchResponse;
}
@GetMapping(value = "search12")
public BulkByScrollResponse search12() throws IOException {

    UpdateByQueryRequest request =
            new UpdateByQueryRequest("users");

    request.setQuery(new MatchQueryBuilder("_id", "001"));

    request.setScript(
            new Script(
                    ScriptType.INLINE, "painless",
                    "ctx._source.full_name = 'Chiwa Kantawong updated by Java'",
                    Collections.emptyMap()));

    request.setRefresh(true);

    BulkByScrollResponse bulkResponse =
            client.updateByQuery(request, RequestOptions.DEFAULT);

    return bulkResponse;
}
@GetMapping(value = "search13")
public BulkByScrollResponse search13() throws IOException {

    UpdateByQueryRequest request =
            new UpdateByQueryRequest("users");

    request.setQuery(new MatchQueryBuilder("_id", "001"));

    Map<String,Object> params = new HashMap<>();
    params.put("my_text", ".....Hello world");
    request.setScript(
            new Script(
                    ScriptType.INLINE, "painless",
                    "ctx._source.full_name = 'Chiwa Kantawong ' + params.my_text",
                    params));

    request.setRefresh(true);

    BulkByScrollResponse bulkResponse =
            client.updateByQuery(request, RequestOptions.DEFAULT);

    return bulkResponse;
}
    /**
        GET users/_doc/3560500619301

        GET users/_search/
        {
          "query": {
            "match": {
              "name" : "Chiwa "
            }
          }
        }

        GET users/_search/
        {
          "query": {
            "match_all": {
              "_name" : "Chiwa "
            }
          }
        }

     POST /users/_search?size=0
     {
         "query": {
             "match": {
                "name" : "Kantawong"
             }
         },
         "aggs": {
             "avg_age": { "avg": { "field": "age" } },
             "sum_age": { "sum": { "field": "age" } }avg_age": { "avg": { "field": "age" } },
             "sum_age": { "sum": { "field": "age" } },
             "max_age": { "max": { "field": "age" } },
             "min_age": { "min": { "field": "age" } }
         }
     }
   **/

}
Scripting Example ตัวอย่างที่น่าใช้

GET users/_search
{
  "query": {
    "match_all": {
    
    }
  },
  "script_fields": {
    "next_year_age": {
      "script": {
        "lang": "painless",
        "source": """
           Long next_age = doc['age'].value + 1;
           return next_age
        """
      }
    }
  }
}

-----------------------------------------------------

GET users/_search
{
  "query": {
    "match_all": {
    
    }
  },
  "script_fields": {
    "next_year_age": {
      "script": {
        "lang": "painless",
        "source": """
           if (doc['age'].value > 24) {
             return doc['age'].value + " is Older"
           }
           return doc['age'].value + " is Younger"
        """
      }
    }
  }
}
-----------------------------------------------------
GET users/_search
{
  "query": {
    "match_all": {
    
    }
  },
  "script_fields": {
    "next_year_age": {
      "script": {
        "lang": "painless",
        "source": """
        
           return doc['age'].value + 1
        """
      }
    },
    "this_year_age": {
      "script": {
        "lang": "painless",
        "source": """
        
           return doc['age']
        """
      }
    }
  }
}
-------------------------------------------------------
DELETE customers

PUT customers
{
  "mappings": {
    "properties": {
      "first_name": {
        "type": "keyword"
      },
      "last_name": {
        "type": "text"
      }
    }
  }
}
-----------------------------------------------------
PUT customers/_doc/1?refresh
{
  "first_name": "Barry",
  "last_name": "White",
  "age" : 20
}

PUT customers/_doc/2?refresh
{
  "first_name": "Chiwa",
  "last_name": "Kantawong",
  "age" : 25
}

GET customers/_mapping

GET customers/_search
{
  "query": {
    "match_all": {}
  },
  "script_fields": {
    "age_report": {
      "script": {
        "lang": "painless",
        "source": """
           if (doc['age'].value >= params.comparation_age) {
             return doc['first_name'].value + "= " + (doc['age'].value) + " gte " + params.comparation_age
           } else {
            return doc['first_name'].value + " = " + (doc['age'].value) + " lt " + params.comparation_age
           }
        """,
        "params": {
          "comparation_age" : 20
        }
      }
    }
  }
}


GET customers/_search
{
  "query": {
    "match_all": {
    
    }
  },
  "script_fields": {
    "next_year_age": {
      "script": {
        "lang": "painless",
        "source": """
           return doc['first_name'].value + " " + (doc['age'].value +1)
        """
      }
    }
  }
}

GET customers/_search
-----------------------------------------------------
#return value, last_name = text can not using doc
GET customers/_search
{
  "script_fields": {
    "full_name": {
      "script": {
        "lang": "painless",
       "source": "doc['first_name'].value + ' ' + params._source.last_name"
      }
    }
  }
}
-----------------------------------------------------
#return value,
GET customers/_search
{
  "script_fields": {
    "full_name": {
      "script": {
        "lang": "painless",
       "source": "params._source.first_name + ' ' + params._source.last_name"
      }
    }
  }
}
-----------------------------------------------------
#return value
GET customers/_search
{
  "query": { 
    "bool": { 
      "must": [
        { "match_all": {}}
      ],
      "filter": [ 
        { "range": { "age": { "gte": 21 }}}
      ]
    }
  },
  
  "script_fields": {
    "full_name": {
      "script": {
        "lang": "painless",
       "source": "doc['first_name'].value + ' ' + params._source.last_name + ' = ' + doc['age'].value"
      }
    }
  }
}
ExistsQuery Example
BoolQueryBuilder boolQuery = QueryBuilders.boolQuery()
    .must(QueryBuilders.existsQuery("usuarioIntegracao"))
    .must(QueryBuilders.termsQuery("tabela", "Arquivo", "Mensagem"))
    .must(QueryBuilders.termQuery("statusTexto", "Erro"))
    .must(QueryBuilders.rangeQuery("dataEntrada").from("now-1d/d").timeZone("-03:00"));

searchSourceBuilder.query(boolQuery);
Java Examples & Tutorials of QueryBuilders.existsQuery (org.elasticsearch.index.query) | Codota
filterQuery.must(QueryBuilders.existsQuery(field));... filterQuery.must(QueryBuilders.existsQuery(f));
www.codota.com

Using ctx
GET users/_doc/001

POST users/_update
{
  "script": {
    "lang": "painless",
    "source": """
    ctx._source.last = params.last;
    ctx._source.nick = params.nick
    """,
    "params": {
      "last": "gaudreau",
      "nick": "hockey"
    }
  }
}

POST users/_update_by_query?wait_for_completion=true&conflicts=proceed
{
"script": {
"lang": "painless",
"source": """
ctx._source.last = params.last;
ctx._source.nick = params.nick;
""",
"params": {
"last": "gaudreau",
"nick": "hockey edit 001"
}
},
"query": {
"term": {
"_id": "001"
}
}
}
POST users/_update_by_query?wait_for_completion=true&conflicts=proceed
{
  "script": {
    "lang": "painless",
    "source": """
      ctx._source.last = params.last;
      ctx._source.nick = params.nick;
      ctx._source.full_name = 'Chiwa Kantawong'
    """,
    "params": {
      "last": "gaudreau",
      "nick": "hockey edit 001"
      }
    },
    "query": {
        "term": {
        "_id": "001"
        }
      }
}

POST users/_update_by_query?wait_for_completion=true&conflicts=proceed
{
  "script": {
    "lang": "painless",
    "source": """
      ctx._source.last = params.last;
      ctx._source.nick = params.nick;
      ctx._source.remove('full_name')
    """,
    "params": {
        "last": "gaudreau",
        "nick": "hockey edit 001"
      }
    },
    "query": {
      "term": {
        "_id": "001"
      }
  }
}
If you plan to use the _update_by_query API, I'd recommend you to do something like:

POST your_index/_update_by_query
{
  "query": {
    "bool": {
      "must_not": {
        "exists": {
          "field": "tags"
        }
      }
    }
  },
  "script": {
    "source": "ctx._source.tags = ''"
  }
}
Otherwise, just using painless, you can do something like:

{
  "script": {
    "source": """
      if(ctx._source.tags == null) {
        ctx._source.tags = null;
      }
    """
  }
}
Using Java UpdateByQueryRequest
https://www.fatalerrors.org/a/elasticsearch-java-high-level-rest-client-update-by-query-api.html

@GetMapping(value = "search12")
public BulkByScrollResponse search12() throws IOException {

    UpdateByQueryRequest request =
            new UpdateByQueryRequest("users");

    request.setQuery(new MatchQueryBuilder("_id", "001"));

    request.setScript(
            new Script(
                    ScriptType.INLINE, "painless",
                    "ctx._source.full_name = 'Chiwa Kantawong updated by Java'",
                    Collections.emptyMap()));

    request.setRefresh(true);

    BulkByScrollResponse bulkResponse =
            client.updateByQuery(request, RequestOptions.DEFAULT);

    return bulkResponse;
}

@GetMapping(value = "search13")
public BulkByScrollResponse search13() throws IOException {

    UpdateByQueryRequest request =
            new UpdateByQueryRequest("users");

    request.setQuery(new MatchQueryBuilder("_id", "001"));

    Map<String,Object> params = new HashMap<>();
    params.put("my_text", ".....Hello world");
    request.setScript(
            new Script(
                    ScriptType.INLINE, "painless",
                    "ctx._source.full_name = 'Chiwa Kantawong ' + params.my_text",
                    params));

    request.setRefresh(true);

    BulkByScrollResponse bulkResponse =
            client.updateByQuery(request, RequestOptions.DEFAULT);

    return bulkResponse;
}
Asynchronous execution
client.updateByQueryAsync(request, RequestOptions.DEFAULT, listener);
listener = new ActionListener<BulkByScrollResponse>() {
    @Override
    public void onResponse(BulkByScrollResponse bulkResponse) {
        
    }
    @Override
    public void onFailure(Exception e) {
        
    }
};
Script with filter
GET /users/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "bool": {
          "must": {
            "script": {
              "script": {
                "lang": "painless",
                "source": """
                def flag = true;
                return flag;
                """,
                "params": {
                  "limit": 50
                }
              }
            }
          }
        }
      }
    }
  }
}
GET /users/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "bool": {
          "must": {
            "script": {
              "script": {
                "lang": "painless",
                "source": """
                if (doc['age'].size() > 0 && doc['age'].value > 24) { return true;} return false;
"""
                         }
                     }       
                   }
                  }
                }
              }
           }
}
================================================
GET /users/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "bool": {
          "must": {
            "script": {
              "script": {
                "lang": "painless",
                "source": """
                    if (doc['age'].size() > 0 && doc['age'].value > 24) { return true;} return false;
                """
              }
            }
          }
        }
      }
    }
  }
}
================================================
POST _scripts/check-age
{
  "script" : {
    "lang": "painless",
    "source" : "if (params.age > 24) { return true;} return false;"
  }

}

GET /users/_search
{
  "query": {
    "bool": {
      "must": {
        "match_all": {}
      },
      "filter": {
        "bool": {
          "must": {
            "script": {
              "script": {
                "id" : "check-age",
                "params": {
                  "age": 100
                }
              }
            }
          }
        }
      }
    }
  }
}
====================Filter By Script==========================
POST _scripts/check-age4
{
    "script" : {
      "lang": "painless",
      "source" : "if (doc['age'].size() > 0 && doc['age'].value > params.checked_value) { return true;} return false;"
    }
}
GET /users/_search
{
  "query": {
    "bool": {
      "must": {
        "match": { "name" : "Chiwa Kantawong"}
      },
      "filter": {
        "bool": {
          "must": {
            "script": {
              "script": {
                "id" : "check-age4",
                "params" : { "checked_value" : 24}
              }
            }
          }
        }
      }
    }
  }
}
=====================Multiple Filter=============
POST _scripts/check-fullName
{
    "script" : {
      "lang": "painless",
      "source" : "if (doc['full_name.keyword'].size() > 0) { return true;} return false;"
    }
}
GET /users/_search
{
  "query": {
    "bool": {
      "must": {
        "match": { "name" : "Chiwa"}
      },
      "filter": {
        "bool": {
          "must":[ 
                    {
                    "script": {
                      "script": {
                        "id" : "check-age5",
                        "params" : { "checked_value" : 24}
                                }
                            }
                    },
                    {
                    "script": {
                      "script": {
                        "id" : "check-fullName"
                                }
                            }
                    }
          ]
        }
      }
    }
  }
}
======================================
GET /users/_search
{
  "query": {
    "bool": {
      "must": {
        "match": { "name" : "Chiwa"}
      },
      "filter": {
        "bool": {
          "must":[ 
                    {
                    "script": {
                      "script": {
                        "id" : "check-age5",
                        "params" : { "checked_value" : 24}
                                }
                            }
                    },
                    {
                    "script": {
                      "script": {
                        "id" : "check-fullName"
                                }
                            }
                    },
                    {
                      "match" : {
                        "new_full_name.en" : "abc"
                      }
                    }
          ]
        }
      }
    }
  }
}
https://www.elastic.co/blog/lost-in-translation-boolean-operations-and-filters-in-the-bool-query














https://naiveskill.com/kubernetes-custom-resource/












public abstract class VendorCalibration {
    public abstract double calibrate(Double rawdata);
}

public class HuwCalibration extends VendorCalibration {
  @Override
  public double calibrate(Double rawdata) {
    return rawdata * 0.945;
  }
}

public class BrocadeCalibration extends VendorCalibration {
  @Override
  public double calibrate(Double rawdata) {
    return rawdata * 0.967;
  }
}

public abstract class GroupCalibration {
    private VendorCalibration vendorCalibration;
    public GroupCalibration(VendorCalibration vendorCalibration){
      this.vendorCalibration = vendorCalibration;
    }
    public VendorCalibration getVendorCalibration() {
        return vendorCalibration;
    }
    public void setVendorCalibration(VendorCalibration vendorCalibration) {
        this.vendorCalibration = vendorCalibration;
    }
    public abstract double applyCorrection(Double rawdata);
}

public class Group1 extends GroupCalibration {

  public Group1(VendorCalibration vendorCalibration) {
      super(vendorCalibration);
  }

  @Override
  public double applyCorrection(Double rawdata) {
    Double groupCalibrated = rawdata * 0.9889 + 0.0345;
    return vendorCalibration.calibrate(groupCalibrated);
  }
}

public class Group2 extends GroupCalibration {
  
  public Group2(VendorCalibration vendorCalibration) {
    super(vendorCalibration);
  }
  
  @Override
  public double applyCorrection(Double rawdata) {
    Double groupCalibrated = rawdata * 0.9289 + 0.0445;
    return vendorCalibration.calibrate(groupCalibrated);
  }
}























select partnertra0_.id as id1_50_, partnertra0_.created_by as created_2_50_, partnertra0_.created_date as created_3_50_, 
       partnertra0_.last_modified_by as last_mod4_50_, partnertra0_.last_modified_date as last_mod5_50_, 
       partnertra0_.amount as amount6_50_, partnertra0_.approved_by as approved7_50_, partnertra0_.commission_receivable as commissi8_50_, 
       partnertra0_.commission_receivable_gst as commissi9_50_, partnertra0_.failure_code as failure10_50_, 
       partnertra0_.failure_message as failure11_50_, partnertra0_.fees as fees12_50_, partnertra0_.fees_gst as fees_gs13_50_,
       partnertra0_.field_1 as field_14_50_, partnertra0_.field_2 as field_15_50_, partnertra0_.field_3 as field_16_50_, 
       partnertra0_.field_4 as field_17_50_, partnertra0_.field_5 as field_18_50_, partnertra0_.gefu_id as gefu_id42_50_, 
       partnertra0_.hold_expiry_date as hold_ex19_50_, partnertra0_.is_ignored as is_igno20_50_, 
       partnertra0_.is_neutralized as is_neut21_50_, partnertra0_.is_pool_wallet_debited as is_pool22_50_, 
       partnertra0_.merchant_payable as merchan23_50_, partnertra0_.merchant_reference_number as merchan24_50_, 
       partnertra0_.owner_id as owner_i25_50_, partnertra0_.owner_type as owner_t26_50_, partnertra0_.partner_id as partner43_50_, 
       partnertra0_.partner_mobile_number as partner27_50_, partnertra0_.partner_reference_number as partner28_50_, 
       partnertra0_.purpose as purpose29_50_, partnertra0_.service_charge as service30_50_, 
       partnertra0_.service_consumption_state as service31_50_, partnertra0_.settlement_cycle as settlem32_50_, 
       partnertra0_.settlement_date as settlem33_50_, partnertra0_.settlement_status as settlem34_50_, 
       partnertra0_.transaction_remarks as transac35_50_, partnertra0_.transaction_sub_type as transac36_50_, 
       partnertra0_.transaction_type as transac37_50_, partnertra0_.tsp_info_id as tsp_inf44_50_, 
       partnertra0_.txn_date as txn_dat38_50_, partnertra0_.txn_reference_number as txn_ref39_50_, 
       partnertra0_.txn_status as txn_sta40_50_, partnertra0_.updated_by as updated41_50_, 
       partnertra0_.virtual_system_accounts_id as virtual45_50_ 
    from 
       partner_transactions partnertra0_ 
    cross join 
       virtual_system_accounts virtualsys1_ 
       ON partnertra0_.virtual_system_accounts_id=virtualsys1_.id 
       WHERE partnertra0_.txn_status=? 
       and partnertra0_.settlement_status=? 
       and virtualsys1_.account_type=? 
       and (partnertra0_.field_1 is ? or partnertra0_.field_1<>?) 
       and partnertra0_.created_date<=? 
       and partnertra0_.id>? 
       order by partnertra0_.id asc limit ?





ON partnertra0_.virtual_system_accounts_id=virtualsys1_.id 
WHERE partnertra0_.txn_status=? 
and partnertra0_.settlement_status=? 
and virtualsys1_.account_type=? 
and (partnertra0_.field_1 is ? or partnertra0_.field_1<>?) 
and partnertra0_.created_date<=? 
and partnertra0_.id>? 
order by partnertra0_.id asc limit ?











OTP Validation Api action_name = VERIFYMODBENE


"transaction_type" :
fundTransferToBankAccount
fund-transfer-to-bankAccount